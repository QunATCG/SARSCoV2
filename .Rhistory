data_PCA$group <- c(rep("Mock",3), rep("NT",3), rep("T",3))
data_PCA$label <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
data_PCA_percentage <- read.table("./Results/Table/Similarity/exp_Data_readcount_PCA_percentage.txt", header = T)
p_pca <- ggplot(data = data_PCA, mapping = aes(x = PC1, y = PC2, colour = group)) + geom_point(size = 5) +
geom_text_repel(aes(label = label), size = 4) +
scale_color_manual(values = c( Mock = "black", NT = "gray88", T = "darkgrey" )) +
xlab(paste("PC1: ",data_PCA_percentage$x[1],"% variance", sep = "")) +
ylab(paste("PC2: ",data_PCA_percentage$x[2],"% variance", sep = "")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_pca
#pdf("./Results/Figure/0_PCA.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/0_PCA.pdf", p_pca, width = 4.36, height = 3.05)
#pdf("./Results/Figure/0_PCA.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/0_PCA.pdf", p_pca, width = 4.0, height = 3.05)
data_cor <- read.table("./Results/Table/exp_Data_readcount_cor.txt", header = T, row.names = 1, sep = "\t")
data_cor <- read.table("./Results/Table/Similarity/exp_Data_readcount_cor.txt", header = T, row.names = 1, sep = "\t")
p_pheatmap <- pheatmap(data_cor, clustering_method = "median")
p_pheatmap
p_pheatmap <- pheatmap(data_cor, treeheight_col = 1, treeheight_row = 1)
p_pheatmap <- pheatmap(data_cor, treeheight_col = 4, treeheight_row = 4)
p_pheatmap <- pheatmap(data_cor, treeheight_col = 4, treeheight_row = 4)
p_pheatmap
p_pheatmap <- pheatmap(data_cor, treeheight_col = 10, treeheight_row = 10)
p_pheatmap
data_cor <- read.table("./Results/Table/Similarity/exp_Data_readcount_cor.txt", header = T, row.names = 1, sep = "\t")
p_pheatmap <- pheatmap(data_cor, treeheight_col = 10, treeheight_row = 10)
p_pheatmap
dev.size()
#pdf("./Results/Figure/0_PCA.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/0_PCA.pdf", p_pca, width = 4.0, height = 3.0)
data_cor <- read.table("./Results/Table/Similarity/exp_Data_readcount_cor.txt", header = T, row.names = 1, sep = "\t")
p_pheatmap <- pheatmap(data_cor, treeheight_col = 10, treeheight_row = 10)
p_pheatmap
#pdf("./Results/Figure/1_Correlation.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/1_Correlation.pdf", p_pheatmap, width = 4.0, height = 3.0)
p_pheatmap <- pheatmap(data_cor, treeheight_col = 10, treeheight_row = 10, cellwidth = 2, cellheight = 2)
p_pheatmap <- pheatmap(data_cor, treeheight_col = 10, treeheight_row = 10, cellwidth = 10, cellheight = 10)
p_pheatmap <- pheatmap(data_cor, treeheight_col = 10, treeheight_row = 10, cellwidth = 10, cellheight = 10)
p_pheatmap
#pdf("./Results/Figure/1_Correlation.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/1_Correlation.pdf", p_pheatmap, width = 4.0, height = 3.0)
data_rawcounts_total_sars <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.readCounts", header = T, sep = "\t", row.names = 1)
rawcounts_total <- colSums(data_rawcounts_total_sars)
rawcounts_sars  <- colSums(data_rawcounts_total_sars[rownames(data_rawcounts_total_sars) %in% sars_genes,])
sars_rawcounts_percentage <- rawcounts_sars/rawcounts_total
sars_rawcounts_percentage_data <- data.frame(sample = rep(c("Mock", "NT", "T"), each = 3), value = sars_rawcounts_percentage)
sars_rawcounts_percentage_NT_mean <- mean(sars_rawcounts_percentage_data$value[4:6])
sars_rawcounts_percentage_T_mean <- mean(sars_rawcounts_percentage_data$value[7:9])
pvalue_NT_T <- t.test(sars_rawcounts_percentage_data$value[4:6], sars_rawcounts_percentage_data$value[7:9])$p.value
myComparision1 <- list(c("NT","T"))
p_covidReadCountsPercent <- ggplot(sars_rawcounts_percentage_data,aes(x = sample, y = value, fill = sample)) +
geom_bar(stat = "summary", fun = mean, width = 0.5) +
scale_fill_manual(values = c("black", "grey88", "darkgrey")) +
#stat_summary(mapping = aes(fill = sample),fun = mean, geom = "bar",fun.args = list(mult = 1), width = 0.7)+
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision1, method = "t.test", label = "p.forma") +
annotate("text", x=2, y= 0.89, label= round(sars_rawcounts_percentage_NT_mean,2)) +
annotate("text", x=3, y= 0.8, label= round(sars_rawcounts_percentage_T_mean,2)) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
p_covidReadCountsPercent
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/2_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.0, height = 3.0)
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/2_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.1, height = 3.0)
p_covidReadCountsPercent
dev.si
dev.size()
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/2_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.1, height = 4.6)
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Results/Table/DEG/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes,]
data_DE_Mock_NT$log2FoldChange <- -data_DE_Mock_NT$log2FoldChange
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT")
p_valcano_Mock_NT
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Results/Table/DEG/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT")
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Results/Table/DEG/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T")
p_valcano_NT_T
qunplotValcano <- function(dat, tagItem){
#dat <- na.omit(dat[,-7])
ggplot(dat,aes(log2FoldChange,-log10(pvalue),color = sig))+
geom_point()+
scale_x_continuous(limits = c(-5, 5)) +
scale_color_manual(values = c(down = "Dark Green", up = "Dark Red", none = "grey")) +
labs(x= expression(Log[2]*" Fold Change"), y = expression(-Log[10]*" (pvalue)"),
title = paste(tagItem, "up: ", table(dat$sig)[3], "Down: ", table(dat$sig)[1], sep = " ")) +
theme_classic()
}
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT")
p_valcano_Mock_NT
View(data_DE_Mock_NT)
# function definition
{
qunDEGAnalysisTwoCondition <- function(dat, condition_CT, num_CT, condition_Treat, num_Treat){
coldata <- data.frame(condition = factor(c(rep(condition_CT, num_CT), rep(condition_Treat, num_Treat)), levels = c(condition_CT, condition_Treat)))
rownames(coldata) <- colnames(dat)
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, parallel = FALSE)
res <- results(dds1, contrast = c('condition', condition_Treat, condition_CT))
res1 <- data.frame(res, stringsAsFactors = FALSE, check.names = FALSE)
res1 <- res1[order(res1$padj, res1$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
resultList <- list(DEG = res1, datNormal = dds1, coldata = coldata )
return(resultList)
}
keepOverExp <- function(dat, cutoff){
res <- dat[which(rowMeans(dat[,c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm")]) >=cutoff |
rowMeans(dat[,c("T_1_fpkm", "T_2_fpkm", "T_3_fpkm")]) >=cutoff |
rowMeans(dat[,c("NT_1_fpkm", "NT_2_fpkm", "NT_3_fpkm")]) >=cutoff),]
}
keepOverReadCount <- function(dat, cutoff){
res <- dat[which(rowSums(dat[,c("Mock_1_rawcount", "Mock_2_rawcount", "Mock_3_rawcount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_rawcount", "NT_2_rawcount", "NT_3_rawcount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_rawcount", "T_2_rawcount", "T_3_rawcount")] >= cutoff ) >= 3),]
return(res)
}
markResult <- function(dat, fc, pthreshold, tagItem){
if(tagItem == "treatVScontrol"){
res1 <- dat[order(dat$pvalue, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$pvalue < pthreshold),'sig'] <- 'up'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$pvalue < pthreshold),'sig'] <- 'down'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$pvalue >= pthreshold),'sig'] <- 'none'
# strict
res1[which(res1$log2FoldChange >= log2(2) & res1$padj < 0.05),'sig_strict'] <- 'up'
res1[which(res1$log2FoldChange <= -log2(2) & res1$padj < 0.05),'sig_strict'] <- 'down'
res1[which(abs(res1$log2FoldChange) <= log2(2) | res1$padj >= 0.05),'sig_strict'] <- 'none'
return(res1)
}
if(tagItem == "controlVStreat"){
res1 <- dat[order(dat$pvalue, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$pvalue < pthreshold),'sig'] <- 'down'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$pvalue < pthreshold),'sig'] <- 'up'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$pvalue >= pthreshold),'sig'] <- 'none'
# strict
res1[which(res1$log2FoldChange >= log2(2) & res1$padj < 0.05),'sig_strict'] <- 'down'
res1[which(res1$log2FoldChange <= -log2(2) & res1$padj < 0.05),'sig_strict'] <- 'up'
res1[which(abs(res1$log2FoldChange) <= log2(2) | res1$padj >= 0.05),'sig_strict'] <- 'none'
return(res1)
}
}
qunGO <- function(dat, tagItem){
dataForGO <- dat
GeneForGO <- dataForGO[dataForGO$sig == tagItem,]$Ensembl
ego_ALL <- enrichGO(gene = GeneForGO,
universe = dataForGO$Ensembl,
OrgDb = org.Hs.eg.db,
keyType = 'ENSEMBL',
ont = "ALL",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
res <- as.data.frame(ego_ALL)
return(res)
}
qunplotValcano <- function(dat, tagItem, rangeNum){
#dat <- na.omit(dat[,-7])
ggplot(dat,aes(log2FoldChange,-log10(pvalue),color = sig))+
geom_point()+
scale_x_continuous(limits = c(-rangeNum, rangeNum)) +
scale_color_manual(values = c(down = "Dark Green", up = "Dark Red", none = "grey")) +
labs(x= expression(Log[2]*" Fold Change"), y = expression(-Log[10]*" (pvalue)"),
title = paste(tagItem, "up: ", table(dat$sig)[3], "Down: ", table(dat$sig)[1], sep = " ")) +
theme_classic()
}
}
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", 8)
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Results/Table/DEG/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T", 3)
p_valcano_NT_T
dev.size()
ggsave(filename = "./Results/Figure/3_DE_Mock_NT_valcano.pdf", p_valcano_Mock_NT, width = 5.4, height = 4.7)
ggsave(filename = "./Results/Figure/4_DE_NT_T_valcano.pdf", p_valcano_NT_T, width = 5.4, height = 4.7)
# get up/down expressed genes of MockVSNT group
Ensembl_Mock_NT_up <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig_strict == "up",]$Ensembl, sars_genes)
Ensembl_Mock_NT_down <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig_strict == "down",]$Ensembl, sars_genes)
exp_Mock_NT_up <- exp_data_fpkm[rownames(exp_data_fpkm) %in% Ensembl_Mock_NT_up,][,fpkm_mean_cols]
exp_Mock_NT_up_scale <- data.frame(na.omit(t(scale(t(exp_Mock_NT_up),center = TRUE, scale = TRUE))))
colnames(exp_Mock_NT_up_scale) <- c("Mock_mean_up", "NT_mean_up", "T_mean_up")
exp_Mock_NT_down <- exp_data_fpkm[rownames(exp_data_fpkm) %in% Ensembl_Mock_NT_down,][,fpkm_mean_cols]
exp_Mock_NT_down_scale <- data.frame(na.omit(t(scale(t(exp_Mock_NT_down), center = TRUE, scale = TRUE))))
colnames(exp_Mock_NT_down_scale) <- c("Mock_mean_down", "NT_mean_down", "T_mean_down")
pheatmap(na.omit(exp_Mock_NT_up_scale), cluster_cols = F, show_rownames = F, color = colorRampPalette(c("navy", "white", "firebrick3"))(100))
pheatmap(na.omit(exp_Mock_NT_down_scale), cluster_cols = F, show_rownames = F, color = colorRampPalette(c("navy", "white", "firebrick3"))(100))
# get up/down expressed genes of MockVSNT group
Ensembl_Mock_NT_up <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig == "up",]$Ensembl, sars_genes)
Ensembl_Mock_NT_down <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig == "down",]$Ensembl, sars_genes)
exp_Mock_NT_up <- exp_data_fpkm[rownames(exp_data_fpkm) %in% Ensembl_Mock_NT_up,][,fpkm_mean_cols]
exp_Mock_NT_up_scale <- data.frame(na.omit(t(scale(t(exp_Mock_NT_up),center = TRUE, scale = TRUE))))
colnames(exp_Mock_NT_up_scale) <- c("Mock_mean_up", "NT_mean_up", "T_mean_up")
exp_Mock_NT_down <- exp_data_fpkm[rownames(exp_data_fpkm) %in% Ensembl_Mock_NT_down,][,fpkm_mean_cols]
exp_Mock_NT_down_scale <- data.frame(na.omit(t(scale(t(exp_Mock_NT_down), center = TRUE, scale = TRUE))))
colnames(exp_Mock_NT_down_scale) <- c("Mock_mean_down", "NT_mean_down", "T_mean_down")
pheatmap(na.omit(exp_Mock_NT_up_scale), cluster_cols = F, show_rownames = F, color = colorRampPalette(c("navy", "white", "firebrick3"))(100))
pheatmap(na.omit(exp_Mock_NT_down_scale), cluster_cols = F, show_rownames = F, color = colorRampPalette(c("navy", "white", "firebrick3"))(100))
exp_Mock_NT_up_scale$Check_Mock_NT_up <- 0
exp_Mock_NT_up_scale$Check_Mock_T_up <- 0
exp_Mock_NT_up_scale$Checkreverse <- 0
for (i in 1:nrow(exp_Mock_NT_up_scale)){
if (exp_Mock_NT_up_scale[i,]$NT_mean_up >= exp_Mock_NT_up_scale[i,]$Mock_mean_up){
exp_Mock_NT_up_scale[i,]$Check_Mock_NT_up <- 1
}
if (exp_Mock_NT_up_scale[i,]$T_mean_up >= exp_Mock_NT_up_scale[i,]$Mock_mean_up){
exp_Mock_NT_up_scale[i,]$Check_Mock_T_up <- 1
}
if(exp_Mock_NT_up_scale[i,]$T_mean_up <= exp_Mock_NT_up_scale[i,]$NT_mean_up){
exp_Mock_NT_up_scale[i,]$Checkreverse <- 1
}
}
exp_Mock_NT_down_scale$Check_Mock_NT_down <- 0
exp_Mock_NT_down_scale$Check_Mock_T_down <- 0
exp_Mock_NT_down_scale$Checkreverse <- 0
for (i in 1:nrow(exp_Mock_NT_down_scale)){
if (exp_Mock_NT_down_scale[i,]$NT_mean_down <= exp_Mock_NT_down_scale[i,]$Mock_mean_down){
exp_Mock_NT_down_scale[i,]$Check_Mock_NT_down <- 1
}
if (exp_Mock_NT_down_scale[i,]$T_mean_down <= exp_Mock_NT_down_scale[i,]$Mock_mean_down){
exp_Mock_NT_down_scale[i,]$Check_Mock_T_down <- 1
}
if(exp_Mock_NT_down_scale[i,]$T_mean_down >= exp_Mock_NT_down_scale[i,]$NT_mean_down){
exp_Mock_NT_down_scale[i,]$Checkreverse <- 1
}
}
# box plot
exp_Mock_NT_up_scale_stack <- stack(exp_Mock_NT_up_scale[,1:3])
exp_Mock_NT_down_scale_stack <- stack(exp_Mock_NT_down_scale[,1:3])
exp_Mock_NT_scale_stack <- rbind(exp_Mock_NT_up_scale_stack, exp_Mock_NT_down_scale_stack)
p_box_1 <- ggplot(exp_Mock_NT_up_scale_stack, aes(x=ind, y=values, fill = ind)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values = c("grey", "Dark Red", "Brown")) +
labs(x = "",y = "z-scaled fpkm")+
theme_classic()
p_box_1
p_box_2 <- ggplot(exp_Mock_NT_down_scale_stack, aes(x=ind, y=values, fill = ind)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values = c("grey","Dark Green", "Olive Drab")) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
p_box_2
myComparision2 <- list(c("NT_mean_up","T_mean_up"), c("NT_mean_down","T_mean_down"))
p_box_3 <- ggplot(exp_Mock_NT_scale_stack, aes(x=ind, y=values, fill = ind)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values = c("grey", "Dark Red", "Brown", "black","Dark Green", "Olive Drab")) +
#stat_summary(fun.data = mean_sdl,fun.args = list(mult=1), geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision2, method = "wilcox.test", label = "p.forma") +
labs(x = "",y = "Average FPKM (Z scaled)") +
theme_classic() +
theme(axis.text.x = element_blank())
p_box_3
ggsave(filename = "./Results/Figure/5_expReverse.pdf", p_box_3, width = 5.6, height = 5.0)
exp_Mock_NT_scale_stack <- rbind(exp_Mock_NT_down_scale_stack,exp_Mock_NT_up_scale_stack)
myComparision2 <- list(c("NT_mean_up","T_mean_up"), c("NT_mean_down","T_mean_down"))
p_box_3 <- ggplot(exp_Mock_NT_scale_stack, aes(x=ind, y=values, fill = ind)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values = c("grey", "Dark Red", "Brown", "black","Dark Green", "Olive Drab")) +
#stat_summary(fun.data = mean_sdl,fun.args = list(mult=1), geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision2, method = "wilcox.test", label = "p.forma") +
labs(x = "",y = "Average FPKM (Z scaled)") +
theme_classic() +
theme(axis.text.x = element_blank())
p_box_3
p_box_3 <- ggplot(exp_Mock_NT_scale_stack, aes(x=ind, y=values, fill = ind)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values = c("black","Dark Green", "Olive Drab", "grey", "Dark Red", "Brown")) +
#stat_summary(fun.data = mean_sdl,fun.args = list(mult=1), geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision2, method = "wilcox.test", label = "p.forma") +
labs(x = "",y = "Average FPKM (Z scaled)") +
theme_classic() +
theme(axis.text.x = element_blank())
p_box_3
ggsave(filename = "./Results/Figure/5_expReverse.pdf", p_box_3, width = 5.6, height = 5.0)
View(data_DE_Mock_NT)
table(data_DE_Mock_NT$sig_strict)
table(data_DE_Mock_NT$sig)
qunGO <- function(dat, tagItem){
dataForGO <- dat
GeneForGO <- dataForGO[dataForGO$sig == tagItem,]$Ensembl
ego_ALL <- enrichGO(gene = GeneForGO,
#universe = dataForGO$Ensembl,
OrgDb = org.Hs.eg.db,
keyType = 'ENSEMBL',
ont = "ALL",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
res <- as.data.frame(ego_ALL)
return(res)
}
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
# load libraries
{
library(DESeq2)
library(tximport)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# load exp data
{
Ensembl_gene <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t")
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
exp_data_readcounts <- round(exp_data_total[,1:9])
exp_data_fpkm <- exp_data_total[,11:19]
exp_data_readcounts_total <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.readCounts", header = T, sep = "\t", row.names = 1)
# calculate variance
exp_data_readcounts$Variance <- apply(exp_data_readcounts, 1, var)
exp_data_fpkm$Variance <- apply(exp_data_fpkm, 1, var)
# check na rows
exp_data_readcounts[is.na(exp_data_readcounts),]
exp_data_fpkm[is.na(exp_data_fpkm),]
# sars genes
sars_genes <- Ensembl_gene$Ensembl[grep("ENSSASG", Ensembl_gene$Ensembl)]
}
# PCA analysis
# get normalized read counts for PCA plotting
{
exp_data_readcounts_PCA <- exp_data_readcounts_total
colnames(exp_data_readcounts_PCA) <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1","T_2", "T_3")
exp_data_readcounts_PCA$Variance <- apply(exp_data_readcounts_PCA, 1, var)
# exclude sars genes
# exp_data_readcounts_PCA <- exp_data_readcounts[!rownames(exp_data_readcounts) %in% sars_genes,]
# remove constant/zero reads genes
data_readcount_PCA <- as.data.frame(t(exp_data_readcounts_PCA[exp_data_readcounts_PCA$Variance != 0,][,1:9]))
data_readcount_PCA_prcomp <- prcomp(data_readcount_PCA, scale. = T)
# calculate percentage of PCs
data_readcount_PCA_var <- data_readcount_PCA_prcomp$sdev^2
data_readcount_PCA_per <- round(data_readcount_PCA_var/sum(data_readcount_PCA_var)*100,1)
write.table(data_readcount_PCA_per, "./Results/Table/Similarity/exp_Data_readcount_PCA_percentage.txt", quote = F, sep = "\t", row.names = T)
# PCs
data_readcount_PCA_output <- data.frame(data_readcount_PCA_prcomp$x)
# Check PCA plot
plot(data_readcount_PCA_output[,1], data_readcount_PCA_output[,2])
write.table(data_readcount_PCA_output, "./Results/Table/Similarity/exp_Data_readcount_PCA.txt", quote = F, sep = "\t", row.names = T)
# correlation
exp_data_readcounts_cor <- cor(exp_data_readcounts_PCA[,1:9])
pheatmap(exp_data_readcounts_cor)
write.table(exp_data_readcounts_cor, "./Results/Table/Similarity/exp_Data_readcount_cor.txt", quote = F, sep = "\t", row.names = T)
}
# DE analysis
# featureCount-DESeq2
{
# sample info
samples_info <- read.table("./Data/SourceData/Sample_information.txt", header = T, sep = "\t")
samples_info$treatment <- c(rep("Mock", 3), rep("NT", 3), rep("T",3))
rownames(samples_info) <- samples_info$Rowname
# DE of Mock and NT (exclude covid read counts)
# load data
exp_data_readcounts_DE_Mock_NT <- exp_data_readcounts[exp_data_readcounts$Variance != 0,][,1:6]
# DE
colData_Mock_NT <- samples_info[1:6,]
colData_Mock_NT$treatment <- factor(colData_Mock_NT$treatment)
data_dds_Mock_NT <- DESeqDataSetFromMatrix(countData = exp_data_readcounts_DE_Mock_NT, colData = colData_Mock_NT, design= ~treatment)
data_dds_Mock_NT <- data_dds_Mock_NT[rowSums(counts(data_dds_Mock_NT)) > 1,]
data_dds_DESeq_Mock_NT <- DESeq(data_dds_Mock_NT, fitType = "mean")
DE_Mock_NT <- results(data_dds_DESeq_Mock_NT, contrast=c("treatment","Mock","NT"))
# DE of NT and T (include covid read counts)
# load data
exp_data_readcounts_DE_NT_T <- exp_data_readcounts_PCA[exp_data_readcounts_PCA$Variance != 0,][,4:9]
colnames(exp_data_readcounts_DE_NT_T) <- c("NT_1_rawcount", "NT_2_rawcount", "NT_3_rawcount",
"T_1_rawcount", "T_2_rawcount", "T_3_rawcount")
# DE
colData_NT_T <- samples_info[4:9,]
colData_NT_T$treatment <- factor(colData_NT_T$treatment)
data_dds_NT_T <- DESeqDataSetFromMatrix(countData = exp_data_readcounts_DE_NT_T, colData = colData_NT_T, design= ~treatment)
data_dds_NT_T <- data_dds_NT_T[rowSums(counts(data_dds_NT_T)) > 1,]
data_dds_DESeq_NT_T <- DESeq(data_dds_NT_T, fitType = "mean")
DE_NT_T <- results(data_dds_DESeq_NT_T, contrast=c("treatment","NT","T"))
# mark results
DE_Mock_NT_result <- markResult(dat = data.frame(DE_Mock_NT), fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_NT_T_result    <- markResult(dat = data.frame(DE_NT_T),    fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_Mock_NT_result$Ensembl <- rownames(DE_Mock_NT_result)
DE_NT_T_result$Ensembl <- rownames(DE_NT_T_result)
exp_data_total$Ensembl <- rownames(exp_data_total)
# remove NA
#DE_Mock_NT_result <- DE_Mock_NT_result[!is.na(DE_Mock_NT_result$padj),]
#DE_Mock_T_result <- DE_Mock_T_result[!is.na(DE_Mock_T_result$padj),]
#DE_NT_T_result <- DE_NT_T_result[!is.na(DE_NT_T_result$padj),]
# merge exp files
DE_Mock_NT_result_exp <- merge(DE_Mock_NT_result, exp_data_total, by = "Ensembl", all.x = T)
DE_NT_T_result_exp <-    merge(DE_NT_T_result,    exp_data_total, by = "Ensembl", all.x = T)
# exclude baseMean = 0
DE_Mock_NT_result_exp <- DE_Mock_NT_result_exp[DE_Mock_NT_result_exp$baseMean != 0,]
DE_NT_T_result_exp    <- DE_NT_T_result_exp[DE_NT_T_result_exp$baseMean != 0,]
# exclude readcounts <= 5
DE_Mock_NT_result_exp <- keepOverReadCount(DE_Mock_NT_result_exp, 5)
DE_NT_T_result_exp    <- keepOverReadCount(DE_NT_T_result_exp, 5)
# exclude fpkm <= 1
DE_Mock_NT_result_exp <- keepOverExp(DE_Mock_NT_result_exp, 1)
DE_NT_T_result_exp <- keepOverExp(DE_NT_T_result_exp, 1)
# reverse fc
DE_Mock_NT_result_exp$log2FoldChange <- -DE_Mock_NT_result_exp$log2FoldChange
DE_NT_T_result_exp$log2FoldChange <- -DE_NT_T_result_exp$log2FoldChange
# Output
write.table(DE_Mock_NT_result_exp, "./Results/Table/DEG/DE_Data_Mock_NT.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_NT_T_result_exp, "./Results/Table/DEG/DE_Data_NT_T.txt", quote = F, sep = "\t", row.names = F)
}
# GO
# For Mock_NT_up genes, extract padj <= 0.05 and abs(log2FC) >= 1 genes
DE_Mock_NT_result_exp_strict <- DE_Mock_NT_result_exp[DE_Mock_NT_result_exp$sig_strict != "none",]
GO_Mock_NT_Up_strict   <- qunGO(dat = DE_Mock_NT_result_exp_strict, "up")
GO_Mock_NT_Down_strict <- qunGO(dat = DE_Mock_NT_result_exp_strict, "down")
View(GO_Mock_NT_Up_strict)
View(GO_Mock_NT_Down_strict)
View(GO_Mock_NT_Up_strict)
qunGO <- function(dat, tagItem, isStrict){
dataForGO <- dat
if(isStrict == "strict"){
GeneForGO <- dataForGO[dataForGO$sig_strict == tagItem,]$Ensembl
}
if(isStrict == "no"){
GeneForGO <- dataForGO[dataForGO$sig == tagItem,]$Ensembl
}
ego_ALL <- enrichGO(gene = GeneForGO,
#universe = dataForGO$Ensembl,
OrgDb = org.Hs.eg.db,
keyType = 'ENSEMBL',
ont = "ALL",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
res <- as.data.frame(ego_ALL)
return(res)
}
View(data_dds_Mock_NT)
View(DE_Mock_NT_result_exp)
# load libraries
{
library(DESeq2)
library(tximport)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# GO
# For Mock_NT_up genes, extract padj <= 0.05 and abs(log2FC) >= 1 genes
GO_Mock_NT_Up_strict   <- qunGO(dat = DE_Mock_NT_result_exp, "up", "T")
GO_Mock_NT_Down_strict <- qunGO(dat = DE_Mock_NT_result_exp, "down", "T")
View(GO_Mock_NT_Up_strict)
# load libraries
{
library(DESeq2)
library(tximport)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# GO
# For Mock_NT_up genes, extract padj <= 0.05 and abs(log2FC) >= 1 genes
GO_Mock_NT_Up_strict   <- qunGO(dat = DE_Mock_NT_result_exp, "up", "T")
View(GO_Mock_NT_Up_strict)
# load libraries
{
library(DESeq2)
library(tximport)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# GO
# For Mock_NT_up genes, extract padj <= 0.05 and abs(log2FC) >= 1 genes
GO_Mock_NT_Up_strict   <- qunGO(dat = DE_Mock_NT_result_exp, "up", "T")
GO_Mock_NT_Down_strict <- qunGO(dat = DE_Mock_NT_result_exp, "down", "T")
View(GO_Mock_NT_Up_strict)
GO_Mock_NT_Up   <- qunGO(dat = DE_Mock_NT_result_exp, "up", "N")
GO_Mock_NT_Down <- qunGO(dat = DE_Mock_NT_result_exp, "down", "N")
GO_NT_T_Up      <- qunGO(dat = DE_NT_T_result_exp, "up", "N")
GO_NT_T_Down    <- qunGO(dat = DE_NT_T_result_exp, "down", "N")
# Output
write.table(GO_Mock_NT_Up_strict,   "./Results/Table/GO/GO_Data_Mock_NT_Up_strict.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_NT_Down_strict, "./Results/Table/GO/GO_Data_Mock_NT_Down_strict.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_NT_Up,   "./Results/Table/GO/GO_Data_Mock_NT_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_NT_Down, "./Results/Table/GO/GO_Data_Mock_NT_Down.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_NT_T_Up,      "./Results/Table/GO/GO_Data_NT_T_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_NT_T_Down,    "./Results/Table/GO/GO_Data_NT_T_Down.txt", quote = F, sep = "\t", row.names = F)
View(GO_Mock_NT_Up)
View(GO_Mock_NT_Up_strict)
View(exp_data_fpkm)
View(exp_data_total)
