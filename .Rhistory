exp_data_readcounts <- exp_data_total[,1:9]
# remove all 0 read counts genes
exp_data_readcounts <- exp_data_readcounts[rowSums(exp_data_readcounts) !=0, ]
# SARS genes
sars_genes <- read.table("./Data/matchedID.txt", header = T, sep = "\t")[62755:62766,]
}
# PCA
{
data_PCA <- read.table("./Data/ExpRNAseq/exp_Data_PCA.txt", header = T, row.names = 1, sep = "\t")
data_PCA$group <- c(rep("Mock",3), rep("NT",3), rep("T",3))
data_PCA$label <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
data_PCA_percentage <- read.table("./Data/ExpRNAseq/exp_Data_PCA_percentage.txt", header = T)
p_pca <- ggplot(data = data_PCA, mapping = aes(x = PC1, y = PC2, colour = group)) + geom_point(size = 1) +
geom_text_repel(aes(label = label), size = 4) +
scale_color_manual(values = c( Mock = "grey", NT = "#00A087B2", T = "#DC0000B2" )) +
xlab(paste("PC1: ",data_PCA_percentage$x[1],"% variance", sep = "")) +
ylab(paste("PC2: ",data_PCA_percentage$x[2],"% variance", sep = "")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#pdf("./Results/Figure/0_PCA.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/0_PCA.pdf", p_pca, width = 7.0, height = 5.36)
#dev.off()
}
# Correlation
{
data_cor <- read.table("./Data/ExpRNAseq/exp_Data_Correlation.txt", header = T, row.names = 1, sep = "\t")
p_pheatmap <- pheatmap(data_cor)
#pdf("./Results/Figure/1_Correlation.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/1_Correlation.pdf", p_pheatmap, width = 7.0, height = 5.36)
#dev.off()
}
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/1_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.0, height = 4.36, units = "px")
readcounts_total <- colSums(exp_data_readcounts)
readcounts_sars  <- colSums(exp_data_readcounts[rownames(exp_data_readcounts) %in% sars_genes$Ensembl,])
sars_readcounts_percentage <- readcounts_sars/readcounts_total
sars_readcounts_percentage_data <- data.frame(sample = rep(c("Mock", "NT", "T"), each = 3), value = readcounts_percentage)
sars_readcounts_percentage_NT_mean <- mean(sars_readcounts_percentage_data$value[4:6])
sars_readcounts_percentage_T_mean <- mean(sars_readcounts_percentage_data$value[7:9])
pvalue_NT_T <- t.test(sars_readcounts_percentage_data$value[4:6], sars_readcounts_percentage_data$value[7:9])$p.value
myComparision <- list(c("NT","T"))
p_covidReadCountsPercent <- ggplot(sars_readcounts_percentage_data,aes(x = sample, y = value, fill = sample)) +
geom_bar(stat = "summary", fun = mean, width = 0.5) +
scale_fill_manual(values = c("grey", "#00A087B2", "#DC0000B2")) +
#stat_summary(mapping = aes(fill = sample),fun = mean, geom = "bar",fun.args = list(mult = 1), width = 0.7)+
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision, method = "t.test", label = "p.forma") +
annotate("text", x=2, y= 0.89, label= round(sars_readcounts_percentage_NT_mean,2)) +
annotate("text", x=3, y= 0.8, label= round(sars_readcounts_percentage_T_mean,2)) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
pbar_covidReadCountsPercent
p_covidReadCountsPercent <- ggplot(sars_readcounts_percentage_data,aes(x = sample, y = value, fill = sample)) +
geom_bar(stat = "summary", fun = mean, width = 0.5) +
scale_fill_manual(values = c("grey", "#00A087B2", "#DC0000B2")) +
#stat_summary(mapping = aes(fill = sample),fun = mean, geom = "bar",fun.args = list(mult = 1), width = 0.7)+
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision, method = "t.test", label = "p.forma") +
annotate("text", x=2, y= 0.89, label= round(sars_readcounts_percentage_NT_mean,2)) +
annotate("text", x=3, y= 0.8, label= round(sars_readcounts_percentage_T_mean,2)) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
readcounts_total <- colSums(exp_data_readcounts)
readcounts_sars  <- colSums(exp_data_readcounts[rownames(exp_data_readcounts) %in% sars_genes$Ensembl,])
sars_readcounts_percentage <- readcounts_sars/readcounts_total
sars_readcounts_percentage_data <- data.frame(sample = rep(c("Mock", "NT", "T"), each = 3), value = readcounts_percentage)
readcounts_total <- colSums(exp_data_readcounts)
readcounts_sars  <- colSums(exp_data_readcounts[rownames(exp_data_readcounts) %in% sars_genes$Ensembl,])
sars_readcounts_percentage <- readcounts_sars/readcounts_total
sars_readcounts_percentage_data <- data.frame(sample = rep(c("Mock", "NT", "T"), each = 3), value = sars_readcounts_percentage)
sars_readcounts_percentage_NT_mean <- mean(sars_readcounts_percentage_data$value[4:6])
sars_readcounts_percentage_T_mean <- mean(sars_readcounts_percentage_data$value[7:9])
pvalue_NT_T <- t.test(sars_readcounts_percentage_data$value[4:6], sars_readcounts_percentage_data$value[7:9])$p.value
myComparision <- list(c("NT","T"))
p_covidReadCountsPercent <- ggplot(sars_readcounts_percentage_data,aes(x = sample, y = value, fill = sample)) +
geom_bar(stat = "summary", fun = mean, width = 0.5) +
scale_fill_manual(values = c("grey", "#00A087B2", "#DC0000B2")) +
#stat_summary(mapping = aes(fill = sample),fun = mean, geom = "bar",fun.args = list(mult = 1), width = 0.7)+
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision, method = "t.test", label = "p.forma") +
annotate("text", x=2, y= 0.89, label= round(sars_readcounts_percentage_NT_mean,2)) +
annotate("text", x=3, y= 0.8, label= round(sars_readcounts_percentage_T_mean,2)) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
p_covidReadCountsPercent
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/1_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.0, height = 4.36, units = "px")
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/1_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.0, height = 4.36)
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
View(data_DE_Mock_NT)
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
View(data_DE_Mock_NT)
# DE NT and T
data_DE_NT_T <- read.table("./Data/ExpRNAseq/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes$Ensembl,]
p_valcano_NT_T <- qunplotValcano(dat =data_DE_NT_T, tagItem = "NT VS T", baseline = 100)
p_valcano_NT_T
View(data_DE_NT_T)
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
# load exp data
{
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
exp_data_readcounts <- exp_data_total[,1:9]
# remove all 0 read counts genes
exp_data_readcounts <- exp_data_readcounts[rowSums(exp_data_readcounts) !=0, ]
# SARS genes
sars_genes <- read.table("./Data/matchedID.txt", header = T, sep = "\t")[62755:62766,]
}
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Data/ExpRNAseq/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes$Ensembl,]
p_valcano_NT_T <- qunplotValcano(dat =data_DE_NT_T, tagItem = "NT VS T", baseline = 100)
p_valcano_NT_T
View(p_valcano_NT_T)
View(data_DE_NT_T)
table(data_DE_NT_T$sig)
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Data/ExpRNAseq/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes$Ensembl,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T", baseline = 100)
p_valcano_NT_T
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T", baseline = 20)
p_valcano_NT_T
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
#### generate data from raw files
{
ensembl_symbol <- read.table("./Data/matchedID.txt", header = T, sep = "\t", stringsAsFactors = F)
sample_info <- read.table("./Data/Sample_information.txt", header = T, sep = "\t", stringsAsFactors = F)
exp_readcount <- read.table("./Data/ExpRNAseq/Human_Covid19.gene.readCount.txt", header = T, sep = "\t", stringsAsFactors = F)
exp_tpm <- read.table("./Data/ExpRNAseq/Human_Covid19.gene.tpm", header = T, sep = "\t", stringsAsFactors = F)
exp_fpkm <- read.table("./Data/ExpRNAseq/Human_Covid19.gene.fpkm",header = T, sep = "\t", stringsAsFactors = F)
exp_colnames_common <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
colnames(exp_readcount) <- c("Ensembl",paste(exp_colnames_common, "readcount", sep = "_"))
colnames(exp_tpm) <- c("Ensembl",paste(exp_colnames_common, "tpm", sep = "_"))
colnames(exp_fpkm) <- c("Ensembl",paste(exp_colnames_common, "fpkm", sep = "_"))
exp_Ensembl_symbl_readcount <- merge(exp_readcount, ensembl_symbol, by = "Ensembl", all.x = T)
exp_Ensembl_symbl_readcount_tpm <- merge(exp_Ensembl_symbl_readcount, exp_tpm, by = "Ensembl", all.x = T)
exp_Ensembl_symbl_readcount_tpm_fpkm <- merge(exp_Ensembl_symbl_readcount_tpm, exp_fpkm, by = "Ensembl", all.x = T)
write.table(exp_Ensembl_symbl_readcount_tpm_fpkm, "./Data/ExpRNAseq/exp_Data_merge.txt", quote = F, sep = "\t", row.names = F)
}
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
# load libraries
{
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# load exp data
{
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
exp_data_readcounts <- exp_data_total[,1:9]
# remove all 0 read counts genes
exp_data_readcounts <- exp_data_readcounts[rowSums(exp_data_readcounts) !=0, ]
}
# PCA analysis
# get normalized read counts for PCA plotting
{
data_PCA <- t(exp_data_readcounts)
# remove 0
data_PCA_prcomp <- prcomp(data_PCA, scale=TRUE)
# calculate percentage of PCs
data_PCA_var <- data_PCA_prcomp$sdev^2
data_PCA_per <- round(data_PCA_var/sum(data_PCA_var)*100,1)
write.table(data_PCA_per, "./Data/ExpRNAseq/exp_Data_PCA_percentage.txt", quote = F, sep = "\t", row.names = T)
# PCs
data_PCA_output <- data.frame(data_PCA_prcomp$x)
write.table(data_PCA_output, "./Data/ExpRNAseq/exp_Data_PCA.txt", quote = F, sep = "\t", row.names = T)
# correlation of samples
data_sample_cor <- cor(exp_data_readcounts)
write.table(data_sample_cor, "./Data/ExpRNAseq/exp_Data_Correlation.txt", quote = F, sep = "\t", row.names = T)
}
# DE analysis
{
# DE
DE_Mock_NT <- qunDEGAnalysisTwoCondition(dat = exp_data_readcounts[,1:6], condition_CT = "Mock", num_CT = 3, condition_Treat = "NT", num_Treat = 3)
DE_Mock_T  <- qunDEGAnalysisTwoCondition(dat = exp_data_readcounts[,c(1:3,7:9)], condition_CT = "Mock", num_CT = 3, condition_Treat = "T", num_Treat = 3)
DE_NT_T    <- qunDEGAnalysisTwoCondition(dat = exp_data_readcounts[,4:9], condition_CT = "NT", num_CT = 3, condition_Treat = "T", num_Treat = 3)
# mark results
DE_Mock_NT_result <- markResult(dat = DE_Mock_NT$DEG, fc = 1.5, pthreshold = 0.05, tagItem = "treatVScontrol")
DE_Mock_T_result  <- markResult(dat = DE_Mock_T$DEG,  fc = 1.5, pthreshold = 0.05, tagItem = "treatVScontrol")
DE_NT_T_result    <- markResult(dat = DE_NT_T$DEG,    fc = 1.5, pthreshold = 0.05, tagItem = "treatVScontrol")
DE_Mock_NT_result$Ensembl <- rownames(DE_Mock_NT_result)
DE_Mock_T_result$Ensembl <- rownames(DE_Mock_T_result)
DE_NT_T_result$Ensembl <- rownames(DE_NT_T_result)
exp_data_total$Ensembl <- rownames(exp_data_total)
# merge exp files
DE_Mock_NT_result_exp <- merge(DE_Mock_NT_result, exp_data_total, by = "Ensembl", all.x = T)
DE_Mock_T_result_exp <-  merge(DE_Mock_T_result,  exp_data_total, by = "Ensembl", all.x = T)
DE_NT_T_result_exp <-    merge(DE_NT_T_result,    exp_data_total, by = "Ensembl", all.x = T)
# exclude baseMean = 0
DE_Mock_NT_result_exp <- DE_Mock_NT_result_exp[DE_Mock_NT_result_exp$baseMean != 0,]
DE_Mock_T_result_exp  <- DE_Mock_T_result_exp[DE_Mock_T_result_exp$baseMean != 0,]
DE_NT_T_result_exp    <- DE_NT_T_result_exp[DE_NT_T_result_exp$baseMean != 0,]
# Output
write.table(DE_Mock_NT_result_exp, "./Data/ExpRNAseq/DE_Data_Mock_NT.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_Mock_T_result_exp, "./Data/ExpRNAseq/DE_Data_Mock_T.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_NT_T_result_exp, "./Data/ExpRNAseq/DE_Data_NT_T.txt", quote = F, sep = "\t", row.names = F)
}
# GO analysis
{
# GO
GO_Mock_NT_Up   <- qunGO(dat = DE_Mock_NT_result_exp, "up")
GO_Mock_NT_Down <- qunGO(dat = DE_Mock_NT_result_exp, "down")
GO_Mock_T_Up    <- qunGO(dat = DE_Mock_T_result_exp, "up")
GO_Mock_T_Down  <- qunGO(dat = DE_Mock_T_result_exp, "down")
GO_NT_T_Up      <- qunGO(dat = DE_NT_T_result_exp, "up")
GO_NT_T_Down    <- qunGO(dat = DE_NT_T_result_exp, "down")
# Output
write.table(GO_Mock_NT_Up,   "./Data/ExpRNAseq/GO_Data_Mock_NT_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_NT_Down, "./Data/ExpRNAseq/GO_Data_Mock_NT_Down.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_T_Up,    "./Data/ExpRNAseq/GO_Data_Mock_T_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_T_Down,  "./Data/ExpRNAseq/GO_Data_Mock_T_Down.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_NT_T_Up,      "./Data/ExpRNAseq/GO_Data_NT_T_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_NT_T_Down,    "./Data/ExpRNAseq/GO_Data_NT_T_Down.txt", quote = F, sep = "\t", row.names = F)
}
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# load exp data
{
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
exp_data_readcounts <- exp_data_total[,1:9]
# remove all 0 read counts genes
exp_data_readcounts <- exp_data_readcounts[rowSums(exp_data_readcounts) !=0, ]
# SARS genes
sars_genes <- read.table("./Data/matchedID.txt", header = T, sep = "\t")[62755:62766,]
}
data_PCA <- read.table("./Data/ExpRNAseq/exp_Data_PCA.txt", header = T, row.names = 1, sep = "\t")
data_PCA$group <- c(rep("Mock",3), rep("NT",3), rep("T",3))
data_PCA$label <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
data_PCA_percentage <- read.table("./Data/ExpRNAseq/exp_Data_PCA_percentage.txt", header = T)
p_pca <- ggplot(data = data_PCA, mapping = aes(x = PC1, y = PC2, colour = group)) + geom_point(size = 1) +
geom_text_repel(aes(label = label), size = 4) +
scale_color_manual(values = c( Mock = "grey", NT = "#00A087B2", T = "#DC0000B2" )) +
xlab(paste("PC1: ",data_PCA_percentage$x[1],"% variance", sep = "")) +
ylab(paste("PC2: ",data_PCA_percentage$x[2],"% variance", sep = "")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_pca
#pdf("./Results/Figure/0_PCA.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/0_PCA.pdf", p_pca, width = 7.0, height = 5.36)
data_cor <- read.table("./Data/ExpRNAseq/exp_Data_Correlation.txt", header = T, row.names = 1, sep = "\t")
p_pheatmap <- pheatmap(data_cor)
#pdf("./Results/Figure/1_Correlation.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/1_Correlation.pdf", p_pheatmap, width = 7.0, height = 5.36)
readcounts_total <- colSums(exp_data_readcounts)
readcounts_sars  <- colSums(exp_data_readcounts[rownames(exp_data_readcounts) %in% sars_genes$Ensembl,])
sars_readcounts_percentage <- readcounts_sars/readcounts_total
sars_readcounts_percentage_data <- data.frame(sample = rep(c("Mock", "NT", "T"), each = 3), value = sars_readcounts_percentage)
sars_readcounts_percentage_NT_mean <- mean(sars_readcounts_percentage_data$value[4:6])
sars_readcounts_percentage_T_mean <- mean(sars_readcounts_percentage_data$value[7:9])
pvalue_NT_T <- t.test(sars_readcounts_percentage_data$value[4:6], sars_readcounts_percentage_data$value[7:9])$p.value
myComparision <- list(c("NT","T"))
p_covidReadCountsPercent <- ggplot(sars_readcounts_percentage_data,aes(x = sample, y = value, fill = sample)) +
geom_bar(stat = "summary", fun = mean, width = 0.5) +
scale_fill_manual(values = c("grey", "#00A087B2", "#DC0000B2")) +
#stat_summary(mapping = aes(fill = sample),fun = mean, geom = "bar",fun.args = list(mult = 1), width = 0.7)+
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision, method = "t.test", label = "p.forma") +
annotate("text", x=2, y= 0.89, label= round(sars_readcounts_percentage_NT_mean,2)) +
annotate("text", x=3, y= 0.8, label= round(sars_readcounts_percentage_T_mean,2)) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
p_covidReadCountsPercent
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/1_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.0, height = 4.36)
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Data/ExpRNAseq/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes$Ensembl,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T", baseline = 20)
p_valcano_NT_T
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Data/ExpRNAseq/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes$Ensembl,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T", baseline = 20)
p_valcano_NT_T
View(exp_data_readcounts)
View(data_DE_NT_T)
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Data/ExpRNAseq/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes$Ensembl,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T", baseline = 20)
p_valcano_NT_T
# get up/down expressed genes of MockVSNT group
data_genes_DE_Mock_NT <- data_DE_Mock_NT[data_DE_Mock_NT$sig != "none",]$Ensembl
# get up/down expressed genes of MockVSNT group
data_genes_DE_Mock_NT_Ensembl <- data_DE_Mock_NT[data_DE_Mock_NT$sig != "none",]$Ensembl
data_genes_DE_Mock_NT_tpm <- exp_data_total[rownames(exp_data_total) %in% data_genes_DE_Mock_NT_Ensembl,]
View(data_genes_DE_Mock_NT_tpm)
colnames(exp_data_total)
tpm_cols <- c("Mock_1_tpm", "Mock_2_tpm", "Mock_3_tpm", "NT_1_tpm", "NT_2_tpm", "NT_3_tpm", "T_1_tpm", "T_2_tpm", "T_3_tpm")
tpm_cols <- c("Mock_1_tpm", "Mock_2_tpm", "Mock_3_tpm", "NT_1_tpm", "NT_2_tpm", "NT_3_tpm", "T_1_tpm", "T_2_tpm", "T_3_tpm")
tpm_cols <- c("Mock_1_tpm", "Mock_2_tpm", "Mock_3_tpm", "NT_1_tpm", "NT_2_tpm", "NT_3_tpm", "T_1_tpm", "T_2_tpm", "T_3_tpm")
fpkm_cols <- c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm", "NT_1_fpkm", "NT_2_fpkm", "NT_3_fpkm", "T_1_fpkm", "T_2_fpkm", "T_3_fpkm")
count_cols <- c("Mock_1_readcount", "Mock_2_readcount", "Mock_3_readcount","NT_1_readcount", "NT_2_readcount", "NT_3_readcount", "T_1_readcount", "T_2_readcount", "T_3_readcount")
data_genes_DE_Mock_NT_tpm <- exp_data_total[rownames(exp_data_total) %in% data_genes_DE_Mock_NT_Ensembl,][,c("Ensembl", "Gene", tpm_cols)]
data_genes_DE_Mock_NT_tpm <- exp_data_total[rownames(exp_data_total) %in% data_genes_DE_Mock_NT_Ensembl,]
data_genes_DE_Mock_NT_tpm <- exp_data_total[rownames(exp_data_total) %in% data_genes_DE_Mock_NT_Ensembl,][,tpm_cols]
data_genes_DE_Mock_NT_tpm_zscale <- t(scale(t(data_genes_DE_Mock_NT_tpm)))
View(data_genes_DE_Mock_NT_tpm_zscale)
# get up/down expressed genes of MockVSNT group
# tpm can be used to compared expression level in different condition
data_genes_DE_Mock_NT_Ensembl_total <- data_DE_Mock_NT[data_DE_Mock_NT$sig != "none",]$Ensembl
data_genes_DE_Mock_NT_Ensembl_up <- data_DE_Mock_NT[data_DE_Mock_NT$sig == "up",]$Ensembl
data_genes_DE_Mock_NT_Ensembl_down <- data_DE_Mock_NT[data_DE_Mock_NT$sig == "down",]$Ensembl
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# load exp data
{
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
exp_data_readcounts <- exp_data_total[,1:9]
# remove all 0 read counts genes
exp_data_readcounts <- exp_data_readcounts[rowSums(exp_data_readcounts) !=0, ]
tpm_cols <- c("Mock_1_tpm", "Mock_2_tpm", "Mock_3_tpm", "NT_1_tpm", "NT_2_tpm", "NT_3_tpm", "T_1_tpm", "T_2_tpm", "T_3_tpm")
fpkm_cols <- c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm", "NT_1_fpkm", "NT_2_fpkm", "NT_3_fpkm", "T_1_fpkm", "T_2_fpkm", "T_3_fpkm")
count_cols <- c("Mock_1_readcount", "Mock_2_readcount", "Mock_3_readcount","NT_1_readcount", "NT_2_readcount", "NT_3_readcount", "T_1_readcount", "T_2_readcount", "T_3_readcount")
# SARS genes
sars_genes <- read.table("./Data/matchedID.txt", header = T, sep = "\t")[62755:62766,]
}
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Data/ExpRNAseq/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes$Ensembl,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT", baseline = 120)
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Data/ExpRNAseq/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes$Ensembl,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T", baseline = 20)
p_valcano_NT_T
# get up/down expressed genes of MockVSNT group
# tpm can be used to compared expression level in different condition
data_genes_DE_Mock_NT_Ensembl_total <- data_DE_Mock_NT[data_DE_Mock_NT$sig != "none",]$Ensembl
data_genes_DE_Mock_NT_Ensembl_up <- data_DE_Mock_NT[data_DE_Mock_NT$sig == "up",]$Ensembl
data_genes_DE_Mock_NT_Ensembl_down <- data_DE_Mock_NT[data_DE_Mock_NT$sig == "down",]$Ensembl
data_genes_DE_Mock_NT_tpm_total <- exp_data_total[rownames(exp_data_total) %in% data_genes_DE_Mock_NT_Ensembl_total,][,tpm_cols]
data_genes_DE_Mock_NT_tpm_total_zscale <- t(scale(t(data_genes_DE_Mock_NT_tpm)))
data_genes_DE_Mock_NT_tpm_total_zscale <- t(scale(t(data_genes_DE_Mock_NT_tpm_total)))
data_genes_DE_Mock_NT_tpm_up_zscale <- data_genes_DE_Mock_NT_tpm_total_zscale[rownames(data_genes_DE_Mock_NT_tpm_total_zscale) %in% data_genes_DE_Mock_NT_Ensembl_up,]
data_genes_DE_Mock_NT_tpm_down_zscale <- data_genes_DE_Mock_NT_tpm_total_zscale[rownames(data_genes_DE_Mock_NT_tpm_total_zscale) %in% data_genes_DE_Mock_NT_Ensembl_down,]
View(data_genes_DE_Mock_NT_tpm_up_zscale)
View(data_genes_DE_Mock_NT_tpm_up_zscale)
View(data_DE_Mock_NT)
View(exp_data_total)
