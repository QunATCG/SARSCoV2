}
}
star_total_over <- star_total
hisat2_total_over <- hisat2_total
# PCA
star_total_over_PCA <- star_total_over[,30:38]
rownames(star_total_over_PCA) <- star_total_over$Ensembl
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
# load libraries
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
# load data
star_total <- read.table("./Data/ExpRNAseq/STAR/Star_exp_total.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
star_covid <- read.table("./Data/ExpRNAseq/STAR/Star_exp_Covid19.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
hisat2_total <- read.table("./Data/ExpRNAseq/Hisat2/Hisat2_exp_total.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
hisat2_covid <- read.table("./Data/ExpRNAseq/Hisat2/Hisat2_exp_Covid19.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
Covid19_geneName <- c("ORF1ab","ORF1ab","S", "ORF3a", "E", "M", "ORF6", "ORF7a","ORF7b",
"ORF8", "N", "ORF10")
star_covid$Gene <- Covid19_geneName
hisat2_covid$Gene <- Covid19_geneName
# function definition
{
qunDEGAnalysisTwoCondition <- function(dat, condition_CT, num_CT, condition_Treat, num_Treat, fc, pthreshold){
coldata <- data.frame(condition = factor(c(rep(condition_CT, num_CT), rep(condition_Treat, num_Treat)), levels = c(condition_CT, condition_Treat)))
rownames(coldata) <- colnames(dat)
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, parallel = FALSE)
res <- results(dds1, contrast = c('condition', condition_Treat, condition_CT))
res1 <- data.frame(res, stringsAsFactors = FALSE, check.names = FALSE)
res1 <- res1[order(res1$padj, res1$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
resultList <- list(DEG = res1, datNormal = dds1, coldata = coldata )
return(resultList)
}
qunDEGAnalysisThreeCondition <- function(dat, condition_CT, num_CT, condition_Treat1, num_Treat1, condition_Treat2, num_Treat2, fc, pthreshold){
coldata <- data.frame(condition = factor(c(rep(condition_CT, num_CT), rep(condition_Treat1, num_Treat1), rep(condition_Treat2, num_Treat2)), levels = c(condition_CT, condition_Treat1, condition_Treat2)))
rownames(coldata) <- colnames(dat)
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, parallel = FALSE)
resultList <- list(DEG =  dds1, coldata = coldata )
return(resultList)
}
keepOverExp <- function(dat, cutoff){
res <- dat[which(rowMeans(dat[,c("Mock_1_FPKM", "Mock_2_FPKM", "Mock_3_FPKM")]) >=cutoff |
rowMeans(dat[,c("T_1_FPKM", "T_2_FPKM", "T_3_FPKM")]) >=cutoff |
rowMeans(dat[,c("NT_1_FPKM", "NT_2_FPKM", "NT_3_FPKM")]) >=cutoff),]
}
keepOverReadCount <- function(dat, cutoff, tagItem){
if(tagItem == "star_total"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
if(tagItem == "star_covid19"){
res <- dat[which(rowSums(dat[,c("Mock_1_ExpectedCount", "Mock_2_ExpectedCount", "Mock_3_ExpectedCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ExpectedCount", "NT_2_ExpectedCount", "NT_3_ExpectedCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ExpectedCount", "T_2_ExpectedCount", "T_3_ExpectedCount")] >= cutoff ) >= 3),]
}
if(tagItem == "hisat2_total"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
if(tagItem == "hisat2_covid19"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
return(res)
}
mergeResult <- function(dat, expData, nameTag, fc, pthreshold, tagItem){
if(tagItem == "three"){
res1 <- data.frame(results(dat, name=nameTag), stringsAsFactors = FALSE, check.names = FALSE)
res1$Ensembl <- rownames(res1)
res <- merge(res1, expData, by = "Ensembl", all.x = T)
return(res)
}
if(tagItem == "two"){
res1 <- data.frame(dat, stringsAsFactors = FALSE, check.names = FALSE)
res1$Ensembl <- rownames(res1)
res <- merge(res1, expData, by = "Ensembl", all.x = T)
return(res)
}
}
markResult <- function(dat, fc, pthreshold, tagItem){
if(tagItem == "treatVScontrol"){
res1 <- dat[order(dat$padj, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$padj < pthreshold),'sig'] <- 'up'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$padj < pthreshold),'sig'] <- 'down'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$padj >= pthreshold),'sig'] <- 'none'
return(res1)
}
if(tagItem == "controlVStreat"){
res1 <- dat[order(dat$padj, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$padj < pthreshold),'sig'] <- 'down'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$padj < pthreshold),'sig'] <- 'up'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$padj >= pthreshold),'sig'] <- 'none'
return(res1)
}
}
qunGO <- function(dat, tagItem){
dataForGO <- dat
GeneForGO <- dataForGO[dataForGO$sig == tagItem,]$Ensembl
ego_ALL <- enrichGO(gene = GeneForGO,
universe = dataForGO$Ensembl,
OrgDb = org.Hs.eg.db,
keyType = 'ENSEMBL',
ont = "ALL",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
res <- as.data.frame(summary(ego_ALL))
return(res)
}
}
star_total_over <- star_total
hisat2_total_over <- hisat2_total
# PCA
star_total_over_PCA <- star_total_over[,30:38]
rownames(star_total_over_PCA) <- star_total_over$Ensembl
hisat2_total_over_PCA <- hisat2_total_over[,21:29]
rownames(hisat2_total_over_PCA) <- hisat2_total_over$Ensembl
# generate results table for NT_vs_Mock
# head(star_total_over_PCA)
DEG_NT_Mock_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,1:6],condition_CT = "Mock", num_CT = 3,
condition_Treat = "NT", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_Mock_star_result <- markResult(dat = mergeResult(dat = DEG_NT_Mock_star$DEG, nameTag = "", expData = star_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
DEG_NT_Mock_hisat2 <- qunDEGAnalysisTwoCondition(dat = hisat2_total_over_PCA[,1:6],condition_CT = "Mock", num_CT = 3,
condition_Treat = "NT", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_Mock_hisat2_result <- markResult(dat = mergeResult(dat = DEG_NT_Mock_hisat2$DEG, nameTag = "", expData = hisat2_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
# generate results table for NT_vs_N
DEG_NT_T_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,4:9],condition_CT = "NT", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_T_star_result <- markResult(dat = mergeResult(dat = DEG_NT_T_star$DEG, nameTag = "", expData = star_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
DEG_NT_T_hisat2 <- qunDEGAnalysisTwoCondition(dat = hisat2_total_over_PCA[,4:9],condition_CT = "NT", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_T_hisat2_result <- markResult(dat = mergeResult(dat = DEG_NT_T_hisat2$DEG, nameTag = "", expData = hisat2_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
# generate results table for T_vs_Mock
DEG_T_Mock_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,c(1,2,3,7,8,9)],condition_CT = "Mock", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
View(star_total_over_PCA)
# generate results table for T_vs_Mock
DEG_T_Mock_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,c(1,2,3,7,8,9)], condition_CT = "Mock", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
# generate results table for T_vs_Mock
DEG_T_Mock_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,c(1,2,3,7,8,9)], condition_CT = "Mock", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_T_Mock_star_result <- markResult(dat = mergeResult(dat = DEG_T_Mock_star$DEG, nameTag = "", expData = star_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
DEG_T_Mock_hisat2 <- qunDEGAnalysisTwoCondition(dat = hisat2_total_over_PCA[,c(1,2,3,7,8,9)],condition_CT = "Mock", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_T_Mock_hisat2_result <- markResult(dat = mergeResult(dat = DEG_T_Mock_hisat2$DEG, nameTag = "", expData = hisat2_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
DEG_NT_T_hisat2_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_hisat2_result, 5, "hisat2_total"),1), "up")
DEG_NT_T_hisat2_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_hisat2_result, 5, "hisat2_total"),1), "down")
DEG_NT_Mock_hisat2_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_hisat2_result, 5, "hisat2_total"),1), "up")
DEG_NT_Mock_hisat2_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_hisat2_result, 5, "hisat2_total"),1), "down")
View(DEG_NT_T_hisat2_GO_Down)
View(DEG_NT_Mock_hisat2_GO_Down)
View(DEG_NT_Mock_hisat2_GO_Up)
test <- keepOverExp(keepOverReadCount(DEG_NT_T_hisat2_result, 5, "hisat2_total"),1)
View(test)
table(test$sig)
DEG_T_Mock_hisat2_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_hisat2_result, 5, "hisat2_total"),1), "up")
DEG_T_Mock_hisat2_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_hisat2_result, 5, "hisat2_total"),1), "down")
View(DEG_T_Mock_hisat2_GO_Up)
# star
DEG_NT_Mock_star_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_star_result, 5, "star_total"),1), "up")
DEG_NT_Mock_star_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_star_result, 5, "star_total"),1), "down")
DEG_NT_T_star_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_star_result, 5, "star_total"),1), "up")
DEG_NT_T_star_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_star_result, 5, "star_total"),1), "down")
DEG_T_Mock_star_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_star_result, 5, "star_total"),1), "up")
DEG_T_Mock_star_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_star_result, 5, "star_total"),1), "down")
View(DEG_NT_Mock_star_GO_Up)
View(DEG_NT_Mock_star_GO_Down)
View(DEG_NT_T_star_GO_Up)
View(DEG_T_Mock_hisat2_GO_Down)
View(DEG_NT_T_star_GO_Down)
View(DEG_NT_T_hisat2_GO_Down)
View(DEG_NT_T_hisat2_GO_Up)
View(star_total_over_PCA)
View(star_total_over)
View(DEG_NT_T_star_result)
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
# load libraries
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
# load data
star_total <- read.table("./Data/ExpRNAseq/STAR/Star_exp_total.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
star_covid <- read.table("./Data/ExpRNAseq/STAR/Star_exp_Covid19.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
hisat2_total <- read.table("./Data/ExpRNAseq/Hisat2/Hisat2_exp_total.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
hisat2_covid <- read.table("./Data/ExpRNAseq/Hisat2/Hisat2_exp_Covid19.txt", header = T,
sep = "\t", stringsAsFactors = FALSE)
Covid19_geneName <- c("ORF1ab","ORF1ab","S", "ORF3a", "E", "M", "ORF6", "ORF7a","ORF7b",
"ORF8", "N", "ORF10")
star_covid$Gene <- Covid19_geneName
hisat2_covid$Gene <- Covid19_geneName
# function definition
{
qunDEGAnalysisTwoCondition <- function(dat, condition_CT, num_CT, condition_Treat, num_Treat, fc, pthreshold){
coldata <- data.frame(condition = factor(c(rep(condition_CT, num_CT), rep(condition_Treat, num_Treat)), levels = c(condition_CT, condition_Treat)))
rownames(coldata) <- colnames(dat)
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, parallel = FALSE)
res <- results(dds1, contrast = c('condition', condition_Treat, condition_CT))
res1 <- data.frame(res, stringsAsFactors = FALSE, check.names = FALSE)
res1 <- res1[order(res1$padj, res1$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
resultList <- list(DEG = res1, datNormal = dds1, coldata = coldata )
return(resultList)
}
qunDEGAnalysisThreeCondition <- function(dat, condition_CT, num_CT, condition_Treat1, num_Treat1, condition_Treat2, num_Treat2, fc, pthreshold){
coldata <- data.frame(condition = factor(c(rep(condition_CT, num_CT), rep(condition_Treat1, num_Treat1), rep(condition_Treat2, num_Treat2)), levels = c(condition_CT, condition_Treat1, condition_Treat2)))
rownames(coldata) <- colnames(dat)
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, parallel = FALSE)
resultList <- list(DEG =  dds1, coldata = coldata )
return(resultList)
}
keepOverExp <- function(dat, cutoff){
res <- dat[which(rowMeans(dat[,c("Mock_1_FPKM", "Mock_2_FPKM", "Mock_3_FPKM")]) >=cutoff |
rowMeans(dat[,c("T_1_FPKM", "T_2_FPKM", "T_3_FPKM")]) >=cutoff |
rowMeans(dat[,c("NT_1_FPKM", "NT_2_FPKM", "NT_3_FPKM")]) >=cutoff),]
}
keepOverReadCount <- function(dat, cutoff, tagItem){
if(tagItem == "star_total"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
if(tagItem == "star_covid19"){
res <- dat[which(rowSums(dat[,c("Mock_1_ExpectedCount", "Mock_2_ExpectedCount", "Mock_3_ExpectedCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ExpectedCount", "NT_2_ExpectedCount", "NT_3_ExpectedCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ExpectedCount", "T_2_ExpectedCount", "T_3_ExpectedCount")] >= cutoff ) >= 3),]
}
if(tagItem == "hisat2_total"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
if(tagItem == "hisat2_covid19"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
return(res)
}
mergeResult <- function(dat, expData, nameTag, fc, pthreshold, tagItem){
if(tagItem == "three"){
res1 <- data.frame(results(dat, name=nameTag), stringsAsFactors = FALSE, check.names = FALSE)
res1$Ensembl <- rownames(res1)
res <- merge(res1, expData, by = "Ensembl", all.x = T)
return(res)
}
if(tagItem == "two"){
res1 <- data.frame(dat, stringsAsFactors = FALSE, check.names = FALSE)
res1$Ensembl <- rownames(res1)
res <- merge(res1, expData, by = "Ensembl", all.x = T)
return(res)
}
}
markResult <- function(dat, fc, pthreshold, tagItem){
if(tagItem == "treatVScontrol"){
res1 <- dat[order(dat$padj, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$padj < pthreshold),'sig'] <- 'up'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$padj < pthreshold),'sig'] <- 'down'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$padj >= pthreshold),'sig'] <- 'none'
return(res1)
}
if(tagItem == "controlVStreat"){
res1 <- dat[order(dat$padj, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$padj < pthreshold),'sig'] <- 'down'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$padj < pthreshold),'sig'] <- 'up'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$padj >= pthreshold),'sig'] <- 'none'
return(res1)
}
}
qunGO <- function(dat, tagItem){
dataForGO <- dat
GeneForGO <- dataForGO[dataForGO$sig == tagItem,]$Ensembl
ego_ALL <- enrichGO(gene = GeneForGO,
universe = dataForGO$Ensembl,
OrgDb = org.Hs.eg.db,
keyType = 'ENSEMBL',
ont = "ALL",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
res <- as.data.frame(ego_ALL)
return(res)
}
}
star_total_over <- star_total
hisat2_total_over <- hisat2_total
# PCA
star_total_over_PCA <- star_total_over[,30:38]
rownames(star_total_over_PCA) <- star_total_over$Ensembl
hisat2_total_over_PCA <- hisat2_total_over[,21:29]
rownames(hisat2_total_over_PCA) <- hisat2_total_over$Ensembl
# generate results table for NT_vs_Mock
# head(star_total_over_PCA)
DEG_NT_Mock_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,1:6],condition_CT = "Mock", num_CT = 3,
condition_Treat = "NT", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_Mock_star_result <- markResult(dat = mergeResult(dat = DEG_NT_Mock_star$DEG, nameTag = "", expData = star_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
DEG_NT_Mock_hisat2 <- qunDEGAnalysisTwoCondition(dat = hisat2_total_over_PCA[,1:6],condition_CT = "Mock", num_CT = 3,
condition_Treat = "NT", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_Mock_hisat2_result <- markResult(dat = mergeResult(dat = DEG_NT_Mock_hisat2$DEG, nameTag = "", expData = hisat2_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
# generate results table for NT_vs_N
DEG_NT_T_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,4:9],condition_CT = "NT", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_T_star_result <- markResult(dat = mergeResult(dat = DEG_NT_T_star$DEG, nameTag = "", expData = star_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
DEG_NT_T_hisat2 <- qunDEGAnalysisTwoCondition(dat = hisat2_total_over_PCA[,4:9],condition_CT = "NT", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_NT_T_hisat2_result <- markResult(dat = mergeResult(dat = DEG_NT_T_hisat2$DEG, nameTag = "", expData = hisat2_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
# generate results table for T_vs_Mock
DEG_T_Mock_star <- qunDEGAnalysisTwoCondition(dat = star_total_over_PCA[,c(1,2,3,7,8,9)], condition_CT = "Mock", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_T_Mock_star_result <- markResult(dat = mergeResult(dat = DEG_T_Mock_star$DEG, nameTag = "", expData = star_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
DEG_T_Mock_hisat2 <- qunDEGAnalysisTwoCondition(dat = hisat2_total_over_PCA[,c(1,2,3,7,8,9)],condition_CT = "Mock", num_CT = 3,
condition_Treat = "T", num_Treat = 3, fc = 2, pthreshold = 0.01)
DEG_T_Mock_hisat2_result <- markResult(dat = mergeResult(dat = DEG_T_Mock_hisat2$DEG, nameTag = "", expData = hisat2_total_over,
fc = 2, pthreshold = 0.01, tagItem = "two"), fc = 1.5, pthreshold = 0.05,tagItem = "treatVScontrol")
# function definition
{
qunDEGAnalysisTwoCondition <- function(dat, condition_CT, num_CT, condition_Treat, num_Treat, fc, pthreshold){
coldata <- data.frame(condition = factor(c(rep(condition_CT, num_CT), rep(condition_Treat, num_Treat)), levels = c(condition_CT, condition_Treat)))
rownames(coldata) <- colnames(dat)
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, parallel = FALSE)
res <- results(dds1, contrast = c('condition', condition_Treat, condition_CT))
res1 <- data.frame(res, stringsAsFactors = FALSE, check.names = FALSE)
res1 <- res1[order(res1$padj, res1$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
resultList <- list(DEG = res1, datNormal = dds1, coldata = coldata )
return(resultList)
}
qunDEGAnalysisThreeCondition <- function(dat, condition_CT, num_CT, condition_Treat1, num_Treat1, condition_Treat2, num_Treat2, fc, pthreshold){
coldata <- data.frame(condition = factor(c(rep(condition_CT, num_CT), rep(condition_Treat1, num_Treat1), rep(condition_Treat2, num_Treat2)), levels = c(condition_CT, condition_Treat1, condition_Treat2)))
rownames(coldata) <- colnames(dat)
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, parallel = FALSE)
resultList <- list(DEG =  dds1, coldata = coldata )
return(resultList)
}
keepOverExp <- function(dat, cutoff){
res <- dat[which(rowMeans(dat[,c("Mock_1_FPKM", "Mock_2_FPKM", "Mock_3_FPKM")]) >=cutoff |
rowMeans(dat[,c("T_1_FPKM", "T_2_FPKM", "T_3_FPKM")]) >=cutoff |
rowMeans(dat[,c("NT_1_FPKM", "NT_2_FPKM", "NT_3_FPKM")]) >=cutoff),]
}
keepOverReadCount <- function(dat, cutoff, tagItem){
if(tagItem == "star_total"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
if(tagItem == "star_covid19"){
res <- dat[which(rowSums(dat[,c("Mock_1_ExpectedCount", "Mock_2_ExpectedCount", "Mock_3_ExpectedCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ExpectedCount", "NT_2_ExpectedCount", "NT_3_ExpectedCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ExpectedCount", "T_2_ExpectedCount", "T_3_ExpectedCount")] >= cutoff ) >= 3),]
}
if(tagItem == "hisat2_total"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
if(tagItem == "hisat2_covid19"){
res <- dat[which(rowSums(dat[,c("Mock_1_ReadCount", "Mock_2_ReadCount", "Mock_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("NT_1_ReadCount", "NT_2_ReadCount", "NT_3_ReadCount")] >= cutoff ) >= 3 |
rowSums(dat[,c("T_1_ReadCount", "T_2_ReadCount", "T_3_ReadCount")] >= cutoff ) >= 3),]
}
return(res)
}
mergeResult <- function(dat, expData, nameTag, fc, pthreshold, tagItem){
if(tagItem == "three"){
res1 <- data.frame(results(dat, name=nameTag), stringsAsFactors = FALSE, check.names = FALSE)
res1$Ensembl <- rownames(res1)
res <- merge(res1, expData, by = "Ensembl", all.x = T)
return(res)
}
if(tagItem == "two"){
res1 <- data.frame(dat, stringsAsFactors = FALSE, check.names = FALSE)
res1$Ensembl <- rownames(res1)
res <- merge(res1, expData, by = "Ensembl", all.x = T)
return(res)
}
}
markResult <- function(dat, fc, pthreshold, tagItem){
if(tagItem == "treatVScontrol"){
res1 <- dat[order(dat$padj, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$padj < pthreshold),'sig'] <- 'up'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$padj < pthreshold),'sig'] <- 'down'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$padj >= pthreshold),'sig'] <- 'none'
return(res1)
}
if(tagItem == "controlVStreat"){
res1 <- dat[order(dat$padj, dat$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
res1[which(res1$log2FoldChange >= log2(fc) & res1$padj < pthreshold),'sig'] <- 'down'
res1[which(res1$log2FoldChange <= -log2(fc) & res1$padj < pthreshold),'sig'] <- 'up'
res1[which(abs(res1$log2FoldChange) <= log2(fc) | res1$padj >= pthreshold),'sig'] <- 'none'
return(res1)
}
}
qunGO <- function(dat, tagItem){
dataForGO <- dat
GeneForGO <- dataForGO[dataForGO$sig == tagItem,]$Ensembl
ego_ALL <- enrichGO(gene = GeneForGO,
universe = dataForGO$Ensembl,
OrgDb = org.Hs.eg.db,
keyType = 'ENSEMBL',
ont = "ALL",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
res <- as.data.frame(ego_ALL)
return(res)
}
}
# GO analysis
#gene.df <- bitr(gene, fromType = "ENTREZID", toType = c("ENSEMBL", "SYMBOL"), OrgDb = org.Hs.eg.db)
# hisat2
DEG_NT_Mock_hisat2_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_hisat2_result, 5, "hisat2_total"),1), "up")
DEG_NT_Mock_hisat2_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_hisat2_result, 5, "hisat2_total"),1), "down")
DEG_NT_T_hisat2_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_hisat2_result, 5, "hisat2_total"),1), "up")
DEG_NT_T_hisat2_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_hisat2_result, 5, "hisat2_total"),1), "down")
DEG_T_Mock_hisat2_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_hisat2_result, 5, "hisat2_total"),1), "up")
DEG_T_Mock_hisat2_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_hisat2_result, 5, "hisat2_total"),1), "down")
# star
DEG_NT_Mock_star_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_star_result, 5, "star_total"),1), "up")
DEG_NT_Mock_star_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_Mock_star_result, 5, "star_total"),1), "down")
DEG_NT_T_star_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_star_result, 5, "star_total"),1), "up")
DEG_NT_T_star_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_NT_T_star_result, 5, "star_total"),1), "down")
DEG_T_Mock_star_GO_Up <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_star_result, 5, "star_total"),1), "up")
DEG_T_Mock_star_GO_Down <- qunGO(keepOverExp(keepOverReadCount(DEG_T_Mock_star_result, 5, "star_total"),1), "down")
View(DEG_NT_T_hisat2_GO_Down)
View(DEG_NT_Mock_hisat2_GO_Down)
View(DEG_NT_Mock_hisat2_result)
table(DEG_NT_Mock_hisat2_result$sig)
table(keepOverExp(keepOverReadCount(DEG_NT_Mock_star_result, 5, "star_total"),1))
table(keepOverExp(keepOverReadCount(DEG_NT_Mock_star_result, 5, "star_total"),1)$fig)
table(keepOverExp(keepOverReadCount(DEG_NT_Mock_star_result, 5, "star_total"),1)$sig)
# save DEG result
write.csv2(DEG_NT_Mock_hisat2_result, "./Results/Table/DEG_NT_Mock_hisat2_result.csv",
row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_Mock_star_result, "./Results/Table/DEG_NT_Mock_star_result.csv",
row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_hisat2_result, "./Results/Table/DEG_T_Mock_hisat2_result.csv",
row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_star_result, "./Results/Table/DEG_T_Mock_star_result.csv",
row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_hisat2_result, "./Results/Table/DEG_NT_T_hisat2_result.csv",
row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_star_result, "./Results/Table/DEG_NT_T_star_result.csv",
row.names = FALSE,quote = FALSE)
#### save DEG results
write.csv2(DEG_NT_Mock_hisat2_GO_Up, "./Results/Table/DEG_NT_Mock_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_hisat2_GO_Up, "./Results/Table/DEG_NT_T_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_hisat2_GO_Up, "./Results/Table/DEG_NT_T_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_hisat2_GO_Up, "./Results/Table/DEG_T_Mock_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_hisat2_GO_Up, "./Results/Table/DEG_T_Mock_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_Mock_star_GO_Up, "./Results/Table/DEG_NT_Mock_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_Mock_star_GO_Down, "./Results/Table/DEG_NT_Mock_star_GO_Down.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_star_GO_Up, "./Results/Table/DEG_NT_T_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_star_GO_Up, "./Results/Table/DEG_NT_T_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_star_GO_Up, "./Results/Table/DEG_T_Mock_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_star_GO_Up, "./Results/Table/DEG_T_Mock_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
#### save DEG results
write.csv2(DEG_NT_Mock_hisat2_GO_Up, "./Results/Table/GO/Hisat2/DEG_NT_Mock_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
#### save DEG results
write.csv2(DEG_NT_Mock_hisat2_GO_Up, "./Results/Table/GO/Hisat2/DEG_NT_Mock_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_Mock_hisat2_GO_Down, "./Results/Table/GO/Hisat2/DEG_NT_Mock_hisat2_GO_Down.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_hisat2_GO_Up, "./Results/Table/GO/Hisat2/DEG_NT_T_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_hisat2_GO_Down, "./Results/Table/GO/Hisat2/DEG_NT_T_hisat2_GO_Down.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_hisat2_GO_Up, "./Results/Table/GO/Hisat2/DEG_T_Mock_hisat2_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_hisat2_GO_Down, "./Results/Table/GO/Hisat2/DEG_T_Mock_hisat2_GO_Down.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_Mock_star_GO_Up, "./Results/Table/GO/Star/DEG_NT_Mock_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_Mock_star_GO_Down, "./Results/Table/GO/Star/DEG_NT_Mock_star_GO_Down.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_star_GO_Up, "./Results/Table/GO/Star/DEG_NT_T_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_NT_T_star_GO_Down, "./Results/Table/GO/Star/DEG_NT_T_star_GO_Doan.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_star_GO_Up, "./Results/Table/GO/Star/DEG_T_Mock_star_GO_Up.csv", row.names = FALSE,quote = FALSE)
write.csv2(DEG_T_Mock_star_GO_Down, "./Results/Table/GO/Star/DEG_T_Mock_star_GO_Down.csv", row.names = FALSE,quote = FALSE)
