exp_data_readcounts_cor <- cor(exp_data_readcounts[,1:9])
pheatmap(exp_data_readcounts_cor)
write.table(exp_data_readcounts_cor, "./Results/Table/exp_Data_readcount_cor.txt", quote = F, sep = "\t", row.names = T)
### based on fpkm
{
# exclude sars genes
exp_data_tpm_PCA <- exp_data_tpm[!rownames(exp_data_tpm) %in% sars_genes,]
# remove constant/zero reads genes
data_tpm_PCA <- as.data.frame(t(exp_data_tpm_PCA[exp_data_tpm_PCA$Variance != 0,][,1:9]))
data_tpm_PCA_prcomp <- prcomp(data_tpm_PCA, scale. = T)
# calculate percentage of PCs
data_tpm_PCA_var <- data_tpm_PCA_prcomp$sdev^2
data_tpm_PCA_per <- round(data_tpm_PCA_var/sum(data_tpm_PCA_var)*100,1)
write.table(data_tpm_PCA_per, "./Results/Table/exp_Data_tpm_PCA_percentage.txt", quote = F, sep = "\t", row.names = T)
# PCs
data_tpm_PCA_output <- data.frame(data_tpm_PCA_prcomp$x)
# Check PCA plot
plot(data_tpm_PCA_output[,1], data_tpm_PCA_output[,2])
write.table(data_tpm_PCA_output, "./Results/Table/exp_Data_tpm_PCA.txt", quote = F, sep = "\t", row.names = T)
# correlation
exp_data_tpm_cor <- cor(exp_data_tpm[,1:9])
pheatmap(exp_data_tpm_cor)
write.table(exp_data_tpm_cor, "./Results/Table/exp_Data_tpm_cor.txt", quote = F, sep = "\t", row.names = T)
}
# exclude sars genes
exp_data_fpkm_PCA <- exp_data_fpkm[!rownames(exp_data_fpkm) %in% sars_genes,]
# remove constant/zero reads genes
data_fpkm_PCA <- as.data.frame(t(exp_data_fpkm_PCA[exp_data_fpkm_PCA$Variance != 0,][,1:9]))
data_fpkm_PCA_prcomp <- prcomp(data_fpkm_PCA, scale. = T)
# calculate percentage of PCs
data_fpkm_PCA_var <- data_fpkm_PCA_prcomp$sdev^2
data_fpkm_PCA_per <- round(data_fpkm_PCA_var/sum(data_fpkm_PCA_var)*100,1)
write.table(data_fpkm_PCA_per, "./Results/Table/exp_Data_fpkm_PCA_percentage.txt", quote = F, sep = "\t", row.names = T)
# PCs
data_fpkm_PCA_output <- data.frame(data_fpkm_PCA_prcomp$x)
# Check PCA plot
plot(data_fpkm_PCA_output[,1], data_fpkm_PCA_output[,2])
write.table(data_fpkm_PCA_output, "./Results/Table/exp_Data_fpkm_PCA.txt", quote = F, sep = "\t", row.names = T)
# correlation
exp_data_fpkm_cor <- cor(exp_data_fpkm[,1:9])
# correlation
exp_data_fpkm_cor <- cor(exp_data_fpkm[,1:9])
pheatmap(exp_data_fpkm_cor)
write.table(exp_data_fpkm_cor, "./Results/Table/exp_Data_fpkm_cor.txt", quote = F, sep = "\t", row.names = T)
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
fpkm_cols <- c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm", "NT_1_fpkm",
"NT_2_fpkm", "NT_3_fpkm", "T_1_fpkm", "T_2_fpkm", "T_3_fpkm")
rawcount_cols <- c("Mock_1_rawcount", "Mock_2_rawcount", "Mock_3_rawcount", "NT_1_rawcount", "NT_2_rawcount", "NT_3_rawcount", "T_1_rawcount", "T_2_rawcount", "T_3_rawcount")
exp_data_rawcounts <- exp_data_total[,rawcount_cols]
Ensembl_gene <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t")
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
fpkm_cols <- c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm", "NT_1_fpkm",
"NT_2_fpkm", "NT_3_fpkm", "T_1_fpkm", "T_2_fpkm", "T_3_fpkm")
rawcount_cols <- c("Mock_1_rawcount", "Mock_2_rawcount", "Mock_3_rawcount", "NT_1_rawcount", "NT_2_rawcount", "NT_3_rawcount", "T_1_rawcount", "T_2_rawcount", "T_3_rawcount")
exp_data_rawcounts <- exp_data_total[,rawcount_cols]
# remove all 0 read counts genes
exp_data_rawcounts <- exp_data_rawcounts[rowSums(exp_data_rawcounts) !=0, ]
# SARS genes
sars_genes <- Ensembl_gene$Ensembl[grep("ENSSASG", Ensembl_gene$Ensembl)]
data_PCA <- read.table("./Results/Table/exp_Data_fpkm_PCA.txt", header = T, row.names = 1, sep = "\t")
data_PCA$group <- c(rep("Mock",3), rep("NT",3), rep("T",3))
data_PCA$label <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
data_PCA_percentage <- read.table("./Results/Table/exp_Data_fpkm_PCA_percentage.txt", header = T)
p_pca <- ggplot(data = data_PCA, mapping = aes(x = PC1, y = PC2, colour = group)) + geom_point(size = 1) +
geom_text_repel(aes(label = label), size = 4) +
scale_color_manual(values = c( Mock = "grey", NT = "#00A087B2", T = "#DC0000B2" )) +
xlab(paste("PC1: ",data_PCA_percentage$x[1],"% variance", sep = "")) +
ylab(paste("PC2: ",data_PCA_percentage$x[2],"% variance", sep = "")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_pca
#pdf("./Results/Figure/0_PCA.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/0_PCA.pdf", p_pca, width = 7.0, height = 5.36)
data_cor <- read.table("./Results/Table/exp_Data_fpkm_cor.txt", header = T, row.names = 1, sep = "\t")
p_pheatmap <- pheatmap(data_cor, clustering_method = "average")
p_pheatmap
p_pheatmap <- pheatmap(data_cor, clustering_method = "k")
p_pheatmap <- pheatmap(data_cor, clustering_method = "complete")
p_pheatmap <- pheatmap(data_cor, clustering_method = "ward")
p_pheatmap <- pheatmap(data_cor, clustering_method = "ward.D")
p_pheatmap <- pheatmap(data_cor, clustering_method = "ward.D2")
p_pheatmap <- pheatmap(data_cor, clustering_method = "median")
p_pheatmap
p_pheatmap <- pheatmap(data_cor, clustering_method = "single")
p_pheatmap <- pheatmap(data_cor)
p_pheatmap
#pdf("./Results/Figure/1_Correlation.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/1_Correlation.pdf", p_pheatmap, width = 7.0, height = 5.36)
data_rawcounts_total_sars <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.readCounts", header = T, sep = "\t", row.names = 1)
rawcounts_total <- colSums(data_rawcounts_total_sars)
rawcounts_sars  <- colSums(data_rawcounts_total_sars[rownames(data_rawcounts_total_sars) %in% sars_genes,])
sars_rawcounts_percentage <- rawcounts_sars/rawcounts_total
sars_rawcounts_percentage_data <- data.frame(sample = rep(c("Mock", "NT", "T"), each = 3), value = sars_rawcounts_percentage)
sars_rawcounts_percentage_NT_mean <- mean(sars_rawcounts_percentage_data$value[4:6])
sars_rawcounts_percentage_T_mean <- mean(sars_rawcounts_percentage_data$value[7:9])
pvalue_NT_T <- t.test(sars_rawcounts_percentage_data$value[4:6], sars_rawcounts_percentage_data$value[7:9])$p.value
myComparision <- list(c("NT","T"))
p_covidReadCountsPercent <- ggplot(sars_rawcounts_percentage_data,aes(x = sample, y = value, fill = sample)) +
geom_bar(stat = "summary", fun = mean, width = 0.5) +
scale_fill_manual(values = c("grey", "#00A087B2", "#DC0000B2")) +
#stat_summary(mapping = aes(fill = sample),fun = mean, geom = "bar",fun.args = list(mult = 1), width = 0.7)+
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision, method = "t.test", label = "p.forma") +
annotate("text", x=2, y= 0.89, label= round(sars_rawcounts_percentage_NT_mean,2)) +
annotate("text", x=3, y= 0.8, label= round(sars_rawcounts_percentage_T_mean,2)) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
p_covidReadCountsPercent
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/2_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.0, height = 4.36)
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Results/Table/DEG/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT")
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Results/Table/DEG/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T")
p_valcano_NT_T
# get up/down expressed genes of MockVSNT group
# tpm can be used to compared expression level in different condition
Ensembl_Mock_NT_up <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig_strict == "up",]$Ensembl, sars_genes)
Ensembl_Mock_NT_down <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig_strict == "down",]$Ensembl, sars_genes)
exp_Mock_NT_up <- data_DE_Mock_NT[data_DE_Mock_NT$Ensembl %in% Ensembl_Mock_NT_up,][,c("Ensembl",fpkm_cols)]
# DE
# featureCount-DESeq2
{
# load data
exp_data_readcounts_DE <- exp_data_readcounts[exp_data_readcounts$Variance != 0,][,1:9]
# sample info
samples_info <- read.table("./Data/SourceData/Sample_information.txt", header = T, sep = "\t")
samples_info$treatment <- c(rep("Mock", 3), rep("NT", 3), rep("T",3))
# DE
data_dds <- DESeqDataSetFromMatrix(countData = exp_data_readcounts_DE, colData = samples_info, design= ~treatment)
data_dds <- data_dds[rowSums(counts(data_dds)) > 1,]
data_dds_DESeq <- DESeq(data_dds)
DE_Mock_NT <- results(data_dds_DESeq, contrast=c("treatment","Mock","NT"))
DE_Mock_T <- results(data_dds_DESeq, contrast=c("treatment","Mock","T"))
DE_NT_T <- results(data_dds_DESeq, contrast=c("treatment","NT","T"))
# mark results
DE_Mock_NT_result <- markResult(dat = data.frame(DE_Mock_NT), fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_Mock_T_result  <- markResult(dat = data.frame(DE_Mock_T),  fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_NT_T_result    <- markResult(dat = data.frame(DE_NT_T),    fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_Mock_NT_result$Ensembl <- rownames(DE_Mock_NT_result)
DE_Mock_T_result$Ensembl <- rownames(DE_Mock_T_result)
DE_NT_T_result$Ensembl <- rownames(DE_NT_T_result)
exp_data_total$Ensembl <- rownames(exp_data_total)
# remove NA
#DE_Mock_NT_result <- DE_Mock_NT_result[!is.na(DE_Mock_NT_result$padj),]
#DE_Mock_T_result <- DE_Mock_T_result[!is.na(DE_Mock_T_result$padj),]
#DE_NT_T_result <- DE_NT_T_result[!is.na(DE_NT_T_result$padj),]
# merge exp files
DE_Mock_NT_result_exp <- merge(DE_Mock_NT_result, exp_data_total, by = "Ensembl", all.x = T)
DE_Mock_T_result_exp <-  merge(DE_Mock_T_result,  exp_data_total, by = "Ensembl", all.x = T)
DE_NT_T_result_exp <-    merge(DE_NT_T_result,    exp_data_total, by = "Ensembl", all.x = T)
# exclude baseMean = 0
DE_Mock_NT_result_exp <- DE_Mock_NT_result_exp[DE_Mock_NT_result_exp$baseMean != 0,]
DE_Mock_T_result_exp  <- DE_Mock_T_result_exp[DE_Mock_T_result_exp$baseMean != 0,]
DE_NT_T_result_exp    <- DE_NT_T_result_exp[DE_NT_T_result_exp$baseMean != 0,]
# Output
write.table(DE_Mock_NT_result_exp, "./Results/Table/DEG/DE_Data_Mock_NT.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_Mock_T_result_exp, "./Results/Table/DEG/DE_Data_Mock_T.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_NT_T_result_exp, "./Results/Table/DEG/DE_Data_NT_T.txt", quote = F, sep = "\t", row.names = F)
}
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
#### generate data from raw files
{
ensembl_symbol <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t", stringsAsFactors = F)
sample_info <- read.table("./Data/SourceData/Sample_information.txt", header = T, sep = "\t", stringsAsFactors = F)
exp_fpkm <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.fpkm", header = T, sep = "\t", stringsAsFactors = F)
exp_readcounts <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.readCounts", header = T, sep = "\t", stringsAsFactors = F)
exp_colnames_common <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
colnames(exp_fpkm) <- c("Ensembl",paste(exp_colnames_common, "fpkm", sep = "_"))
colnames(exp_readcounts) <- c("Ensembl", paste(exp_colnames_common, "rawcount", sep = "_"))
exp_Ensembl_symbl_readcount <- merge(exp_readcounts, ensembl_symbol, by = "Ensembl", all.x = T)
# only keep both
exp_Ensembl_symbl_readcount_fpkm <- merge(exp_Ensembl_symbl_readcount, exp_fpkm, by = "Ensembl")
write.table(exp_Ensembl_symbl_readcount_fpkm, "./Data/ExpRNAseq/exp_Data_merge.txt", quote = F, sep = "\t", row.names = F)
}
{
# DEG analysis was performed using R package DESeq2
# ploting was performed using R package pheatmap
# <RSEM-DESeq2> this method was used by some groups, such as
# https://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html
# https://pubmed.ncbi.nlm.nih.gov/38097578/
# https://pubmed.ncbi.nlm.nih.gov/38092806/
# https://pubmed.ncbi.nlm.nih.gov/33870146/
# https://pubmed.ncbi.nlm.nih.gov/34528097/
# https://pubmed.ncbi.nlm.nih.gov/38049398/
}
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
# load libraries
{
library(DESeq2)
library(tximport)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# load exp data
{
Ensembl_gene <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t")
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
exp_data_readcounts <- exp_data_total[,1:9]
exp_data_fpkm <- exp_data_total[,11:19]
# calculate variance
exp_data_readcounts$Variance <- apply(exp_data_readcounts, 1, var)
exp_data_fpkm$Variance <- apply(exp_data_fpkm, 1, var)
# check na rows
exp_data_readcounts[is.na(exp_data_readcounts),]
exp_data_fpkm[is.na(exp_data_fpkm),]
# sars genes
sars_genes <- Ensembl_gene$Ensembl[grep("ENSSASG", Ensembl_gene$Ensembl)]
}
# PCA analysis
# get normalized read counts for PCA plotting
{
### based on read counts
{
# exclude sars genes
exp_data_readcounts_PCA <- exp_data_readcounts[!rownames(exp_data_readcounts) %in% sars_genes,]
# remove constant/zero reads genes
data_readcount_PCA <- as.data.frame(t(exp_data_readcounts_PCA[exp_data_readcounts_PCA$Variance != 0,][,1:9]))
data_readcount_PCA_prcomp <- prcomp(data_readcount_PCA, scale. = T)
# calculate percentage of PCs
data_readcount_PCA_var <- data_readcount_PCA_prcomp$sdev^2
data_readcount_PCA_per <- round(data_readcount_PCA_var/sum(data_readcount_PCA_var)*100,1)
write.table(data_readcount_PCA_per, "./Results/Table/exp_Data_readcount_PCA_percentage.txt", quote = F, sep = "\t", row.names = T)
# PCs
data_readcount_PCA_output <- data.frame(data_readcount_PCA_prcomp$x)
# Check PCA plot
plot(data_readcount_PCA_output[,1], data_readcount_PCA_output[,2])
write.table(data_readcount_PCA_output, "./Results/Table/exp_Data_readcount_PCA.txt", quote = F, sep = "\t", row.names = T)
# correlation
exp_data_readcounts_cor <- cor(exp_data_readcounts[,1:9])
pheatmap(exp_data_readcounts_cor)
write.table(exp_data_readcounts_cor, "./Results/Table/exp_Data_readcount_cor.txt", quote = F, sep = "\t", row.names = T)
}
### based on fpkm
{
# exclude sars genes
exp_data_fpkm_PCA <- exp_data_fpkm[!rownames(exp_data_fpkm) %in% sars_genes,]
# remove constant/zero reads genes
data_fpkm_PCA <- as.data.frame(t(exp_data_fpkm_PCA[exp_data_fpkm_PCA$Variance != 0,][,1:9]))
data_fpkm_PCA_prcomp <- prcomp(data_fpkm_PCA, scale. = T)
# calculate percentage of PCs
data_fpkm_PCA_var <- data_fpkm_PCA_prcomp$sdev^2
data_fpkm_PCA_per <- round(data_fpkm_PCA_var/sum(data_fpkm_PCA_var)*100,1)
write.table(data_fpkm_PCA_per, "./Results/Table/exp_Data_fpkm_PCA_percentage.txt", quote = F, sep = "\t", row.names = T)
# PCs
data_fpkm_PCA_output <- data.frame(data_fpkm_PCA_prcomp$x)
# Check PCA plot
plot(data_fpkm_PCA_output[,1], data_fpkm_PCA_output[,2])
write.table(data_fpkm_PCA_output, "./Results/Table/exp_Data_fpkm_PCA.txt", quote = F, sep = "\t", row.names = T)
# correlation
exp_data_fpkm_cor <- cor(exp_data_fpkm[,1:9])
pheatmap(exp_data_fpkm_cor)
write.table(exp_data_fpkm_cor, "./Results/Table/exp_Data_fpkm_cor.txt", quote = F, sep = "\t", row.names = T)
}
}
# DE
# featureCount-DESeq2
{
# load data
exp_data_readcounts_DE <- exp_data_readcounts[exp_data_readcounts$Variance != 0,][,1:9]
# sample info
samples_info <- read.table("./Data/SourceData/Sample_information.txt", header = T, sep = "\t")
samples_info$treatment <- c(rep("Mock", 3), rep("NT", 3), rep("T",3))
# DE
data_dds <- DESeqDataSetFromMatrix(countData = exp_data_readcounts_DE, colData = samples_info, design= ~treatment)
data_dds <- data_dds[rowSums(counts(data_dds)) > 1,]
data_dds_DESeq <- DESeq(data_dds)
DE_Mock_NT <- results(data_dds_DESeq, contrast=c("treatment","Mock","NT"))
DE_Mock_T <- results(data_dds_DESeq, contrast=c("treatment","Mock","T"))
DE_NT_T <- results(data_dds_DESeq, contrast=c("treatment","NT","T"))
# mark results
DE_Mock_NT_result <- markResult(dat = data.frame(DE_Mock_NT), fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_Mock_T_result  <- markResult(dat = data.frame(DE_Mock_T),  fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_NT_T_result    <- markResult(dat = data.frame(DE_NT_T),    fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_Mock_NT_result$Ensembl <- rownames(DE_Mock_NT_result)
DE_Mock_T_result$Ensembl <- rownames(DE_Mock_T_result)
DE_NT_T_result$Ensembl <- rownames(DE_NT_T_result)
exp_data_total$Ensembl <- rownames(exp_data_total)
# remove NA
#DE_Mock_NT_result <- DE_Mock_NT_result[!is.na(DE_Mock_NT_result$padj),]
#DE_Mock_T_result <- DE_Mock_T_result[!is.na(DE_Mock_T_result$padj),]
#DE_NT_T_result <- DE_NT_T_result[!is.na(DE_NT_T_result$padj),]
# merge exp files
DE_Mock_NT_result_exp <- merge(DE_Mock_NT_result, exp_data_total, by = "Ensembl", all.x = T)
DE_Mock_T_result_exp <-  merge(DE_Mock_T_result,  exp_data_total, by = "Ensembl", all.x = T)
DE_NT_T_result_exp <-    merge(DE_NT_T_result,    exp_data_total, by = "Ensembl", all.x = T)
# exclude baseMean = 0
DE_Mock_NT_result_exp <- DE_Mock_NT_result_exp[DE_Mock_NT_result_exp$baseMean != 0,]
DE_Mock_T_result_exp  <- DE_Mock_T_result_exp[DE_Mock_T_result_exp$baseMean != 0,]
DE_NT_T_result_exp    <- DE_NT_T_result_exp[DE_NT_T_result_exp$baseMean != 0,]
# Output
write.table(DE_Mock_NT_result_exp, "./Results/Table/DEG/DE_Data_Mock_NT.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_Mock_T_result_exp, "./Results/Table/DEG/DE_Data_Mock_T.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_NT_T_result_exp, "./Results/Table/DEG/DE_Data_NT_T.txt", quote = F, sep = "\t", row.names = F)
}
# load data
exp_data_readcounts_DE <- exp_data_readcounts[exp_data_readcounts$Variance != 0,][,1:9]
# sample info
samples_info <- read.table("./Data/SourceData/Sample_information.txt", header = T, sep = "\t")
samples_info$treatment <- c(rep("Mock", 3), rep("NT", 3), rep("T",3))
# DE
data_dds <- DESeqDataSetFromMatrix(countData = exp_data_readcounts_DE, colData = samples_info, design= ~treatment)
data_dds <- data_dds[rowSums(counts(data_dds)) > 1,]
data_dds_DESeq <- DESeq(data_dds)
DE_Mock_NT <- results(data_dds_DESeq, contrast=c("treatment","Mock","NT"))
DE_Mock_T <- results(data_dds_DESeq, contrast=c("treatment","Mock","T"))
DE_NT_T <- results(data_dds_DESeq, contrast=c("treatment","NT","T"))
# mark results
DE_Mock_NT_result <- markResult(dat = data.frame(DE_Mock_NT), fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_Mock_T_result  <- markResult(dat = data.frame(DE_Mock_T),  fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_NT_T_result    <- markResult(dat = data.frame(DE_NT_T),    fc = 1.5, pthreshold = 0.05, tagItem = "controlVStreat")
DE_Mock_NT_result$Ensembl <- rownames(DE_Mock_NT_result)
DE_Mock_T_result$Ensembl <- rownames(DE_Mock_T_result)
DE_NT_T_result$Ensembl <- rownames(DE_NT_T_result)
exp_data_total$Ensembl <- rownames(exp_data_total)
# merge exp files
DE_Mock_NT_result_exp <- merge(DE_Mock_NT_result, exp_data_total, by = "Ensembl", all.x = T)
DE_Mock_T_result_exp <-  merge(DE_Mock_T_result,  exp_data_total, by = "Ensembl", all.x = T)
DE_NT_T_result_exp <-    merge(DE_NT_T_result,    exp_data_total, by = "Ensembl", all.x = T)
# exclude baseMean = 0
DE_Mock_NT_result_exp <- DE_Mock_NT_result_exp[DE_Mock_NT_result_exp$baseMean != 0,]
DE_Mock_T_result_exp  <- DE_Mock_T_result_exp[DE_Mock_T_result_exp$baseMean != 0,]
DE_NT_T_result_exp    <- DE_NT_T_result_exp[DE_NT_T_result_exp$baseMean != 0,]
# Output
write.table(DE_Mock_NT_result_exp, "./Results/Table/DEG/DE_Data_Mock_NT.txt", quote = F, sep = "\t", row.names = F)
# Output
write.table(DE_Mock_NT_result_exp, "./Results/Table/DEG/DE_Data_Mock_NT.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_Mock_T_result_exp, "./Results/Table/DEG/DE_Data_Mock_T.txt", quote = F, sep = "\t", row.names = F)
write.table(DE_NT_T_result_exp, "./Results/Table/DEG/DE_Data_NT_T.txt", quote = F, sep = "\t", row.names = F)
# GO analysis
{
# GO
GO_Mock_NT_Up   <- qunGO(dat = DE_Mock_NT_result_exp, "up")
GO_Mock_NT_Down <- qunGO(dat = DE_Mock_NT_result_exp, "down")
GO_Mock_T_Up    <- qunGO(dat = DE_Mock_T_result_exp, "up")
GO_Mock_T_Down  <- qunGO(dat = DE_Mock_T_result_exp, "down")
GO_NT_T_Up      <- qunGO(dat = DE_NT_T_result_exp, "up")
GO_NT_T_Down    <- qunGO(dat = DE_NT_T_result_exp, "down")
# Output
write.table(GO_Mock_NT_Up,   "./Results/Table/GO/GO_Data_Mock_NT_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_NT_Down, "./Results/Table/GO/GO_Data_Mock_NT_Down.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_T_Up,    "./Results/Table/GO/GO_Data_Mock_T_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_Mock_T_Down,  "./Results/Table/GO/GO_Data_Mock_T_Down.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_NT_T_Up,      "./Results/Table/GO/GO_Data_NT_T_Up.txt", quote = F, sep = "\t", row.names = F)
write.table(GO_NT_T_Down,    "./Results/Table/GO/GO_Data_NT_T_Down.txt", quote = F, sep = "\t", row.names = F)
}
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# load exp data
{
Ensembl_gene <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t")
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
fpkm_cols <- c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm", "NT_1_fpkm",
"NT_2_fpkm", "NT_3_fpkm", "T_1_fpkm", "T_2_fpkm", "T_3_fpkm")
rawcount_cols <- c("Mock_1_rawcount", "Mock_2_rawcount", "Mock_3_rawcount", "NT_1_rawcount", "NT_2_rawcount", "NT_3_rawcount", "T_1_rawcount", "T_2_rawcount", "T_3_rawcount")
exp_data_rawcounts <- exp_data_total[,rawcount_cols]
# remove all 0 read counts genes
exp_data_rawcounts <- exp_data_rawcounts[rowSums(exp_data_rawcounts) !=0, ]
# SARS genes
sars_genes <- Ensembl_gene$Ensembl[grep("ENSSASG", Ensembl_gene$Ensembl)]
}
# PCA
{
data_PCA <- read.table("./Results/Table/exp_Data_fpkm_PCA.txt", header = T, row.names = 1, sep = "\t")
data_PCA$group <- c(rep("Mock",3), rep("NT",3), rep("T",3))
data_PCA$label <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
data_PCA_percentage <- read.table("./Results/Table/exp_Data_fpkm_PCA_percentage.txt", header = T)
p_pca <- ggplot(data = data_PCA, mapping = aes(x = PC1, y = PC2, colour = group)) + geom_point(size = 1) +
geom_text_repel(aes(label = label), size = 4) +
scale_color_manual(values = c( Mock = "grey", NT = "#00A087B2", T = "#DC0000B2" )) +
xlab(paste("PC1: ",data_PCA_percentage$x[1],"% variance", sep = "")) +
ylab(paste("PC2: ",data_PCA_percentage$x[2],"% variance", sep = "")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_pca
#pdf("./Results/Figure/0_PCA.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/0_PCA.pdf", p_pca, width = 7.0, height = 5.36)
#dev.off()
}
# Correlation
{
data_cor <- read.table("./Results/Table/exp_Data_fpkm_cor.txt", header = T, row.names = 1, sep = "\t")
p_pheatmap <- pheatmap(data_cor)
p_pheatmap
#pdf("./Results/Figure/1_Correlation.pdf", width = 7.0, height = 5.36)
ggsave(filename = "./Results/Figure/1_Correlation.pdf", p_pheatmap, width = 7.0, height = 5.36)
#dev.off()
}
# percentage of SARS readcounts
{
data_rawcounts_total_sars <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.readCounts", header = T, sep = "\t", row.names = 1)
rawcounts_total <- colSums(data_rawcounts_total_sars)
rawcounts_sars  <- colSums(data_rawcounts_total_sars[rownames(data_rawcounts_total_sars) %in% sars_genes,])
sars_rawcounts_percentage <- rawcounts_sars/rawcounts_total
sars_rawcounts_percentage_data <- data.frame(sample = rep(c("Mock", "NT", "T"), each = 3), value = sars_rawcounts_percentage)
sars_rawcounts_percentage_NT_mean <- mean(sars_rawcounts_percentage_data$value[4:6])
sars_rawcounts_percentage_T_mean <- mean(sars_rawcounts_percentage_data$value[7:9])
pvalue_NT_T <- t.test(sars_rawcounts_percentage_data$value[4:6], sars_rawcounts_percentage_data$value[7:9])$p.value
myComparision <- list(c("NT","T"))
p_covidReadCountsPercent <- ggplot(sars_rawcounts_percentage_data,aes(x = sample, y = value, fill = sample)) +
geom_bar(stat = "summary", fun = mean, width = 0.5) +
scale_fill_manual(values = c("grey", "#00A087B2", "#DC0000B2")) +
#stat_summary(mapping = aes(fill = sample),fun = mean, geom = "bar",fun.args = list(mult = 1), width = 0.7)+
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),geom = "errorbar", width = 0.2)+
stat_compare_means(comparisons = myComparision, method = "t.test", label = "p.forma") +
annotate("text", x=2, y= 0.89, label= round(sars_rawcounts_percentage_NT_mean,2)) +
annotate("text", x=3, y= 0.8, label= round(sars_rawcounts_percentage_T_mean,2)) +
labs(x = "",y = "Covid19 Read Counts (%)")+
theme_classic()
p_covidReadCountsPercent
#pdf("./Results/Figure/1_covidReadCounts.pdf", width = 4.0, height = 4.36)
ggsave(filename = "./Results/Figure/2_covidReadCounts.pdf", p_covidReadCountsPercent, width = 4.0, height = 4.36)
#dev.off()
}
# DE Mock and NT
data_DE_Mock_NT <- read.table("./Results/Table/DEG/DE_Data_Mock_NT.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_Mock_NT <- data_DE_Mock_NT[!data_DE_Mock_NT$Ensembl %in% sars_genes,]
p_valcano_Mock_NT <- qunplotValcano(dat = data_DE_Mock_NT, tagItem = "Mock VS NT")
p_valcano_Mock_NT
# DE NT and T
data_DE_NT_T <- read.table("./Results/Table/DEG/DE_Data_NT_T.txt", header = T, sep = "\t", stringsAsFactors = F)
# exclude sars genes
data_DE_NT_T <- data_DE_NT_T[!data_DE_NT_T$Ensembl %in% sars_genes,]
p_valcano_NT_T <- qunplotValcano(dat = data_DE_NT_T, tagItem = "NT VS T")
p_valcano_NT_T
# get up/down expressed genes of MockVSNT group
Ensembl_Mock_NT_up <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig_strict == "up",]$Ensembl, sars_genes)
Ensembl_Mock_NT_down <- setdiff(data_DE_Mock_NT[data_DE_Mock_NT$sig_strict == "down",]$Ensembl, sars_genes)
exp_Mock_NT_up <- data_DE_Mock_NT[data_DE_Mock_NT$Ensembl %in% Ensembl_Mock_NT_up,][,c("Ensembl",fpkm_cols)]
rownames(exp_Mock_NT_up) <- exp_Mock_NT_up$Ensembl
exp_Mock_NT_up <- exp_Mock_NT_up[,fpkm_cols]
exp_Mock_NT_up_scale <- t(scale(t(exp_Mock_NT_up)))
exp_Mock_NT_down <- data_DE_Mock_NT[data_DE_Mock_NT$Ensembl %in% Ensembl_Mock_NT_down,][,c("Ensembl",fpkm_cols)]
rownames(exp_Mock_NT_down) <- exp_Mock_NT_down$Ensembl
exp_Mock_NT_down <- exp_Mock_NT_down[,fpkm_cols]
exp_Mock_NT_down_scale <- t(scale(t(exp_Mock_NT_down)))
pheatmap(na.omit(exp_Mock_NT_up_scale), cluster_cols = F, show_rownames = F)
pheatmap(na.omit(exp_Mock_NT_down_scale), cluster_cols = F, show_rownames = F)
View(exp_Mock_NT_up)
View(exp_Mock_NT_down)
pheatmap(na.omit(exp_Mock_NT_up_scale), cluster_cols = T, show_rownames = F)
pheatmap(na.omit(exp_Mock_NT_down_scale), cluster_cols = T, show_rownames = F)
