# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
myColors <- c("grey", "#00A087B2", "#DC0000B2")
}
# load exp data
{
Ensembl_gene <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t")
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
fpkm_cols <- c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm", "NT_1_fpkm",
"NT_2_fpkm", "NT_3_fpkm", "T_1_fpkm", "T_2_fpkm", "T_3_fpkm")
rawcount_cols <- c("Mock_1_rawcount", "Mock_2_rawcount", "Mock_3_rawcount", "NT_1_rawcount",
"NT_2_rawcount", "NT_3_rawcount", "T_1_rawcount", "T_2_rawcount", "T_3_rawcount")
fpkm_mean_cols <- c("Mock_mean", "NT_mean", "T_mean")
exp_data_rawcounts <- exp_data_total[,rawcount_cols]
exp_data_fpkm <- exp_data_total[,fpkm_cols]
exp_data_fpkm$Mock_mean <- apply(exp_data_fpkm[,1:3], 1, mean)
exp_data_fpkm$NT_mean <- apply(exp_data_fpkm[,4:6], 1, mean)
exp_data_fpkm$T_mean <- apply(exp_data_fpkm[,7:9], 1, mean)
# remove all 0 read counts genes
exp_data_rawcounts <- exp_data_rawcounts[rowSums(exp_data_rawcounts) !=0, ]
# SARS genes
sars_genes <- Ensembl_gene$Ensembl[grep("ENSSASG", Ensembl_gene$Ensembl)]
}
data_rawcounts_total_sars <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.readCounts", header = T, sep = "\t", row.names = 1)
rawcounts_total <- colSums(data_rawcounts_total_sars)
View(data_rawcounts_total_sars)
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
# load libraries
{
library(DESeq2)
library(tximport)
library(pheatmap)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
}
# load exp data
{
Ensembl_gene <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t")
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
exp_data_readcounts <- round(exp_data_total[,1:9])
exp_data_fpkm <- exp_data_total[,11:19]
exp_data_readcounts_total <- read.table("./Data/ExpRNAseq/Human_Covid19_removerRNA.gene.readCounts", header = T, sep = "\t", row.names = 1)
# calculate variance
exp_data_readcounts$Variance <- apply(exp_data_readcounts, 1, var)
exp_data_fpkm$Variance <- apply(exp_data_fpkm, 1, var)
# check na rows
exp_data_readcounts[is.na(exp_data_readcounts),]
exp_data_fpkm[is.na(exp_data_fpkm),]
# sars genes
sars_genes <- Ensembl_gene$Ensembl[grep("ENSSASG", Ensembl_gene$Ensembl)]
}
exp_data_readcounts_PCA <- exp_data_readcounts_total
View(exp_data_readcounts_total)
colnames(exp_data_readcounts_PCA) <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1","T_2", "T_3")
exp_data_readcounts_PCA$Variance <- apply(exp_data_readcounts_PCA, 1, var)
# exclude sars genes
# exp_data_readcounts_PCA <- exp_data_readcounts[!rownames(exp_data_readcounts) %in% sars_genes,]
# remove constant/zero reads genes
data_readcount_PCA <- as.data.frame(t(exp_data_readcounts_PCA[exp_data_readcounts_PCA$Variance != 0,][,1:9]))
data_readcount_PCA_prcomp <- prcomp(data_readcount_PCA, scale. = T)
# calculate percentage of PCs
data_readcount_PCA_var <- data_readcount_PCA_prcomp$sdev^2
data_readcount_PCA_per <- round(data_readcount_PCA_var/sum(data_readcount_PCA_var)*100,1)
# PCs
data_readcount_PCA_output <- data.frame(data_readcount_PCA_prcomp$x)
# Check PCA plot
plot(data_readcount_PCA_output[,1], data_readcount_PCA_output[,2])
# correlation
exp_data_readcounts_cor <- cor(exp_data_readcounts_PCA[,1:9])
pheatmap(exp_data_readcounts_cor)
exp_data_readcounts_PCA <- exp_data_readcounts_total
colnames(exp_data_readcounts_PCA) <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1","T_2", "T_3")
exp_data_readcounts_PCA$Variance <- apply(exp_data_readcounts_PCA, 1, var)
# exclude sars genes
# exp_data_readcounts_PCA <- exp_data_readcounts[!rownames(exp_data_readcounts) %in% sars_genes,]
# remove constant/zero reads genes
data_readcount_PCA <- as.data.frame(t(exp_data_readcounts_PCA[exp_data_readcounts_PCA$Variance != 0,][,1:9]))
data_readcount_PCA_prcomp <- prcomp(data_readcount_PCA, scale. = T)
# calculate percentage of PCs
data_readcount_PCA_var <- data_readcount_PCA_prcomp$sdev^2
data_readcount_PCA_per <- round(data_readcount_PCA_var/sum(data_readcount_PCA_var)*100,1)
write.table(data_readcount_PCA_per, "./Results/Table/Similarity/exp_Data_readcount_PCA_percentage.txt", quote = F, sep = "\t", row.names = T)
# PCs
data_readcount_PCA_output <- data.frame(data_readcount_PCA_prcomp$x)
# Check PCA plot
plot(data_readcount_PCA_output[,1], data_readcount_PCA_output[,2])
write.table(data_readcount_PCA_output, "./Results/Table/Similarity/exp_Data_readcount_PCA.txt", quote = F, sep = "\t", row.names = T)
# env setting
{
# set working env
rm(list = ls())
# set your working path
setwd("/Users/liqun/Desktop/Projects/Covid19/Data/Code/SARSCoV2/")
# check your working path
dirNow <- getwd()
}
### load libraries
{
library(ggplot2)
library(gplots)
library(ggrepel)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(VennDiagram)
library(clusterProfiler)
library(org.Hs.eg.db)
source("./Code/basicFunction.R")
myColors <- c("grey", "#00A087B2", "#DC0000B2")
}
# load exp data
{
Ensembl_gene <- read.table("./Data/SourceData/matchedID.txt", header = T, sep = "\t")
exp_data_total <- read.table("./Data/ExpRNAseq/exp_Data_merge.txt", header = T, sep = "\t", stringsAsFactors = F, row.names = 1)
fpkm_cols <- c("Mock_1_fpkm", "Mock_2_fpkm", "Mock_3_fpkm", "NT_1_fpkm",
"NT_2_fpkm", "NT_3_fpkm", "T_1_fpkm", "T_2_fpkm", "T_3_fpkm")
rawcount_cols <- c("Mock_1_rawcount", "Mock_2_rawcount", "Mock_3_rawcount", "NT_1_rawcount",
"NT_2_rawcount", "NT_3_rawcount", "T_1_rawcount", "T_2_rawcount", "T_3_rawcount")
fpkm_mean_cols <- c("Mock_mean", "NT_mean", "T_mean")
exp_data_rawcounts <- exp_data_total[,rawcount_cols]
exp_data_fpkm <- exp_data_total[,fpkm_cols]
exp_data_fpkm$Mock_mean <- apply(exp_data_fpkm[,1:3], 1, mean)
exp_data_fpkm$NT_mean <- apply(exp_data_fpkm[,4:6], 1, mean)
exp_data_fpkm$T_mean <- apply(exp_data_fpkm[,7:9], 1, mean)
# remove all 0 read counts genes
exp_data_rawcounts <- exp_data_rawcounts[rowSums(exp_data_rawcounts) !=0, ]
# SARS genes
sars_genes <- Ensembl_gene$Ensembl[grep("ENSSASG", Ensembl_gene$Ensembl)]
}
data_PCA <- read.table("./Results/Table/Similarity/exp_Data_readcount_PCA.txt", header = T, row.names = 1, sep = "\t")
data_PCA$group <- c(rep("Mock",3), rep("NT",3), rep("T",3))
data_PCA$label <- c("Mock_1", "Mock_2", "Mock_3", "NT_1", "NT_2", "NT_3", "T_1", "T_2", "T_3")
data_PCA_percentage <- read.table("./Results/Table/Similarity/exp_Data_readcount_PCA_percentage.txt", header = T)
p_pca <- ggplot(data = data_PCA, mapping = aes(x = PC1, y = PC2, colour = group)) + geom_point(size = 5) +
geom_text_repel(aes(label = label), size = 4) +
scale_color_manual(values = c( Mock = "black", NT = "gray88", T = "darkgrey" )) +
xlab(paste("PC1: ",data_PCA_percentage$x[1],"% variance", sep = "")) +
ylab(paste("PC2: ",data_PCA_percentage$x[2],"% variance", sep = "")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_pca
